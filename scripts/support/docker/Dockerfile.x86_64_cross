FROM dockcross/linux-arm64:latest

# TODO: use a multi-stage build to reduce the download size when updating this container.
# The Rust toolchain layer will get updated most frequently, but we could keep the system
# dependencies layer intact for much longer.

ENV DEFAULT_DOCKCROSS_IMAGE promethium/fc-dev-amd64-cross
ARG RUST_TOOLCHAIN="1.39.0"
ARG TMP_BUILD_DIR=/tmp/build
ARG FIRECRACKER_SRC_DIR="/firecracker"
ARG FIRECRACKER_BUILD_DIR="$FIRECRACKER_SRC_DIR/build"
ARG CARGO_REGISTRY_DIR="$FIRECRACKER_BUILD_DIR/cargo_registry"
ARG CARGO_GIT_REGISTRY_DIR="$FIRECRACKER_BUILD_DIR/cargo_git_registry"

ENV CARGO_HOME=/usr/local/rust
ENV RUSTUP_HOME=/usr/local/rust
ENV PATH="$PATH:/usr/xcc/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr/lib:$CARGO_HOME/bin"

COPY rust /usr/local/rust

RUN apt-get update \
    && apt-get -y install --no-install-recommends \
        wget \
        curl \
        file \
        iperf3 \
        iproute2 \
        g++ \
        gcc \
        gcc-aarch64-linux-gnu \
        jq \
        libcurl4-openssl-dev \
        libdw-dev \
        libiberty-dev \
        libssl-dev \
        lsof \
        cmake \
        make \
        musl-tools \
        net-tools \
        openssh-client \
        pkgconf \
        python \
        python3 \
        python3-dev \
        python3-pip \
        python3-venv    \
        zlib1g-dev \
        xz-utils \
        screen \
    && python3 -m pip install \
        setuptools \
        wheel \
    && python3 -m pip install \
        boto3 \
        nsenter \
        pycodestyle \
        pydocstyle \
        pylint \
        pytest \
        pytest-timeout \
        pyyaml \
        requests \
        requests-unixsocket \
        retry


# Install the Rust toolchain
#
RUN mkdir "$TMP_BUILD_DIR" \
    && curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain "$RUST_TOOLCHAIN" \
        && rustup target add aarch64-unknown-linux-gnu \
        && rustup component add rustfmt \
        && rustup component add clippy-preview \
        && rm -rf "$CARGO_HOME/registry" \
        && ln -s "$CARGO_REGISTRY_DIR" "$CARGO_HOME/registry" \
        && rm -rf "$CARGO_HOME/git" \
        && ln -s "$CARGO_GIT_REGISTRY_DIR" "$CARGO_HOME/git" \
    && cd / \
    && rm -rf "$TMP_BUILD_DIR"

RUN mkdir "$TMP_BUILD_DIR" \
    && cd "$TMP_BUILD_DIR" \
        && wget http://ftp.de.debian.org/debian/pool/main/d/device-tree-compiler/libfdt-dev_1.4.7-3_arm64.deb \
        && ar x libfdt-dev_1.4.7-3_arm64.deb \
        && tar -xvf data.tar.xz \
        && ls -la \
        && ls -la usr/lib/aarch64-linux-gnu/ \
        && wget http://ftp.de.debian.org/debian/pool/main/d/device-tree-compiler/libfdt1_1.4.7-3_arm64.deb \
        && ar x libfdt1_1.4.7-3_arm64.deb \
        && tar -xvf data.tar.xz \
        && ls -la \
    && echo `realpath usr/lib/aarch64-linux-gnu/libfdt.so` \
    && mkdir -p "/usr/local/rust/toolchains/$RUST_TOOLCHAIN-x86_64-unknown-linux-gnu/lib/rustlib/aarch64-unknown-linux-gnu/lib" \
    && cp usr/lib/aarch64-linux-gnu/libfdt.a "/usr/xcc/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr/lib/" \
    && cp usr/lib/aarch64-linux-gnu/libfdt.so "/usr/xcc/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr/lib/" \
    && ls -la /usr/xcc/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr/lib/ \
    && cd / \
    && rm -rf "$TMP_BUILD_DIR"

WORKDIR "$FIRECRACKER_SRC_DIR"

