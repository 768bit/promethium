// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image image
// swagger:model Image
type Image struct {

	// architecture
	// Enum: [x86_64 aarch64]
	Architecture string `json:"Architecture,omitempty"`

	// boot params
	BootParams string `json:"BootParams,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"CreatedAt,omitempty"`

	// ID
	ID string `json:"ID,omitempty"`

	// image hash
	ImageHash string `json:"ImageHash,omitempty"`

	// kernel hash
	KernelHash string `json:"KernelHash,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// size
	Size int64 `json:"Size,omitempty"`

	// source
	// Enum: [promethium docker tar raw qcow2 capstan]
	Source string `json:"Source,omitempty"`

	// source URI
	SourceURI string `json:"SourceURI,omitempty"`

	// type
	// Enum: [standard osv qemu]
	Type string `json:"Type,omitempty"`

	// version
	Version string `json:"Version,omitempty"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageTypeArchitecturePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["x86_64","aarch64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeArchitecturePropEnum = append(imageTypeArchitecturePropEnum, v)
	}
}

const (

	// ImageArchitectureX8664 captures enum value "x86_64"
	ImageArchitectureX8664 string = "x86_64"

	// ImageArchitectureAarch64 captures enum value "aarch64"
	ImageArchitectureAarch64 string = "aarch64"
)

// prop value enum
func (m *Image) validateArchitectureEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeArchitecturePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateArchitecture(formats strfmt.Registry) error {

	if swag.IsZero(m.Architecture) { // not required
		return nil
	}

	// value enum
	if err := m.validateArchitectureEnum("Architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var imageTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["promethium","docker","tar","raw","qcow2","capstan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeSourcePropEnum = append(imageTypeSourcePropEnum, v)
	}
}

const (

	// ImageSourcePromethium captures enum value "promethium"
	ImageSourcePromethium string = "promethium"

	// ImageSourceDocker captures enum value "docker"
	ImageSourceDocker string = "docker"

	// ImageSourceTar captures enum value "tar"
	ImageSourceTar string = "tar"

	// ImageSourceRaw captures enum value "raw"
	ImageSourceRaw string = "raw"

	// ImageSourceQcow2 captures enum value "qcow2"
	ImageSourceQcow2 string = "qcow2"

	// ImageSourceCapstan captures enum value "capstan"
	ImageSourceCapstan string = "capstan"
)

// prop value enum
func (m *Image) validateSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("Source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

var imageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["standard","osv","qemu"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeTypePropEnum = append(imageTypeTypePropEnum, v)
	}
}

const (

	// ImageTypeStandard captures enum value "standard"
	ImageTypeStandard string = "standard"

	// ImageTypeOsv captures enum value "osv"
	ImageTypeOsv string = "osv"

	// ImageTypeQemu captures enum value "qemu"
	ImageTypeQemu string = "qemu"
)

// prop value enum
func (m *Image) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
