// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaDataNetworkBondsConfig meta data network bonds config
// swagger:model MetaDataNetworkBondsConfig
type MetaDataNetworkBondsConfig struct {

	// ad select
	// Enum: [stable bandwidth count]
	AdSelect string `json:"ad-select,omitempty"`

	// addresses
	Addresses []string `json:"addresses"`

	// all slaves active
	AllSlavesActive bool `json:"all-slaves-active,omitempty"`

	// arp all targets
	// Enum: [any all]
	ArpAllTargets string `json:"arp-all-targets,omitempty"`

	// arp interval
	ArpInterval int32 `json:"arp-interval,omitempty"`

	// arp ip targets
	// Max Items: 16
	ArpIPTargets []strfmt.IPv4 `json:"arp-ip-targets"`

	// arp validate
	// Enum: [none active backup all]
	ArpValidate string `json:"arp-validate,omitempty"`

	// dhcp4
	Dhcp4 bool `json:"dhcp4,omitempty"`

	// dhcp6
	Dhcp6 bool `json:"dhcp6,omitempty"`

	// down delay
	DownDelay int32 `json:"down-delay,omitempty"`

	// fail over mac policy
	// Enum: [none active follow]
	FailOverMacPolicy string `json:"fail-over-mac-policy,omitempty"`

	// gateway4
	// Format: ipv4
	Gateway4 strfmt.IPv4 `json:"gateway4,omitempty"`

	// gateway6
	// Format: ipv6
	Gateway6 strfmt.IPv6 `json:"gateway6,omitempty"`

	// gratuitous arp
	GratuitousArp int32 `json:"gratuitous-arp,omitempty"`

	// interfaces
	Interfaces []string `json:"interfaces"`

	// lacp rate
	// Enum: [slow fast]
	LacpRate string `json:"lacp-rate,omitempty"`

	// learn packet interval
	LearnPacketInterval int32 `json:"learn-packet-interval,omitempty"`

	// mii monitor interval
	MiiMonitorInterval int32 `json:"mii-monitor-interval,omitempty"`

	// min links
	MinLinks int32 `json:"min-links,omitempty"`

	// mode
	// Enum: [balance-rr active-backup balance-xor broadcast 802.3ad balance-tlb balance-alb]
	Mode string `json:"mode,omitempty"`

	// mtu
	Mtu int32 `json:"mtu,omitempty"`

	// nameservers
	Nameservers *MetaDataNetworkEthernetsDNSConfig `json:"nameservers,omitempty"`

	// packets per slave
	PacketsPerSlave int32 `json:"packets-per-slave,omitempty"`

	// primary reselect policy
	// Enum: [always better failure]
	PrimaryReselectPolicy string `json:"primary-reselect-policy,omitempty"`

	// routes
	Routes []*MetaDataNetworkRoutesConfig `json:"routes"`

	// transmit hash policy
	// Enum: [layer2 layer2+3 layer3+4 encap2+3 encap3+4]
	TransmitHashPolicy string `json:"transmit-hash-policy,omitempty"`

	// up delay
	UpDelay int32 `json:"up-delay,omitempty"`
}

// Validate validates this meta data network bonds config
func (m *MetaDataNetworkBondsConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArpAllTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArpIPTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArpValidate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailOverMacPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLacpRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameservers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryReselectPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransmitHashPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var metaDataNetworkBondsConfigTypeAdSelectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable","bandwidth","count"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypeAdSelectPropEnum = append(metaDataNetworkBondsConfigTypeAdSelectPropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigAdSelectStable captures enum value "stable"
	MetaDataNetworkBondsConfigAdSelectStable string = "stable"

	// MetaDataNetworkBondsConfigAdSelectBandwidth captures enum value "bandwidth"
	MetaDataNetworkBondsConfigAdSelectBandwidth string = "bandwidth"

	// MetaDataNetworkBondsConfigAdSelectCount captures enum value "count"
	MetaDataNetworkBondsConfigAdSelectCount string = "count"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validateAdSelectEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypeAdSelectPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validateAdSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.AdSelect) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdSelectEnum("ad-select", "body", m.AdSelect); err != nil {
		return err
	}

	return nil
}

var metaDataNetworkBondsConfigTypeArpAllTargetsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypeArpAllTargetsPropEnum = append(metaDataNetworkBondsConfigTypeArpAllTargetsPropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigArpAllTargetsAny captures enum value "any"
	MetaDataNetworkBondsConfigArpAllTargetsAny string = "any"

	// MetaDataNetworkBondsConfigArpAllTargetsAll captures enum value "all"
	MetaDataNetworkBondsConfigArpAllTargetsAll string = "all"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validateArpAllTargetsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypeArpAllTargetsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validateArpAllTargets(formats strfmt.Registry) error {

	if swag.IsZero(m.ArpAllTargets) { // not required
		return nil
	}

	// value enum
	if err := m.validateArpAllTargetsEnum("arp-all-targets", "body", m.ArpAllTargets); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataNetworkBondsConfig) validateArpIPTargets(formats strfmt.Registry) error {

	if swag.IsZero(m.ArpIPTargets) { // not required
		return nil
	}

	iArpIPTargetsSize := int64(len(m.ArpIPTargets))

	if err := validate.MaxItems("arp-ip-targets", "body", iArpIPTargetsSize, 16); err != nil {
		return err
	}

	for i := 0; i < len(m.ArpIPTargets); i++ {

		if err := validate.FormatOf("arp-ip-targets"+"."+strconv.Itoa(i), "body", "ipv4", m.ArpIPTargets[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var metaDataNetworkBondsConfigTypeArpValidatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","active","backup","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypeArpValidatePropEnum = append(metaDataNetworkBondsConfigTypeArpValidatePropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigArpValidateNone captures enum value "none"
	MetaDataNetworkBondsConfigArpValidateNone string = "none"

	// MetaDataNetworkBondsConfigArpValidateActive captures enum value "active"
	MetaDataNetworkBondsConfigArpValidateActive string = "active"

	// MetaDataNetworkBondsConfigArpValidateBackup captures enum value "backup"
	MetaDataNetworkBondsConfigArpValidateBackup string = "backup"

	// MetaDataNetworkBondsConfigArpValidateAll captures enum value "all"
	MetaDataNetworkBondsConfigArpValidateAll string = "all"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validateArpValidateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypeArpValidatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validateArpValidate(formats strfmt.Registry) error {

	if swag.IsZero(m.ArpValidate) { // not required
		return nil
	}

	// value enum
	if err := m.validateArpValidateEnum("arp-validate", "body", m.ArpValidate); err != nil {
		return err
	}

	return nil
}

var metaDataNetworkBondsConfigTypeFailOverMacPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","active","follow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypeFailOverMacPolicyPropEnum = append(metaDataNetworkBondsConfigTypeFailOverMacPolicyPropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigFailOverMacPolicyNone captures enum value "none"
	MetaDataNetworkBondsConfigFailOverMacPolicyNone string = "none"

	// MetaDataNetworkBondsConfigFailOverMacPolicyActive captures enum value "active"
	MetaDataNetworkBondsConfigFailOverMacPolicyActive string = "active"

	// MetaDataNetworkBondsConfigFailOverMacPolicyFollow captures enum value "follow"
	MetaDataNetworkBondsConfigFailOverMacPolicyFollow string = "follow"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validateFailOverMacPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypeFailOverMacPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validateFailOverMacPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.FailOverMacPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateFailOverMacPolicyEnum("fail-over-mac-policy", "body", m.FailOverMacPolicy); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataNetworkBondsConfig) validateGateway4(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway4) { // not required
		return nil
	}

	if err := validate.FormatOf("gateway4", "body", "ipv4", m.Gateway4.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataNetworkBondsConfig) validateGateway6(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway6) { // not required
		return nil
	}

	if err := validate.FormatOf("gateway6", "body", "ipv6", m.Gateway6.String(), formats); err != nil {
		return err
	}

	return nil
}

var metaDataNetworkBondsConfigTypeLacpRatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["slow","fast"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypeLacpRatePropEnum = append(metaDataNetworkBondsConfigTypeLacpRatePropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigLacpRateSlow captures enum value "slow"
	MetaDataNetworkBondsConfigLacpRateSlow string = "slow"

	// MetaDataNetworkBondsConfigLacpRateFast captures enum value "fast"
	MetaDataNetworkBondsConfigLacpRateFast string = "fast"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validateLacpRateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypeLacpRatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validateLacpRate(formats strfmt.Registry) error {

	if swag.IsZero(m.LacpRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateLacpRateEnum("lacp-rate", "body", m.LacpRate); err != nil {
		return err
	}

	return nil
}

var metaDataNetworkBondsConfigTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["balance-rr","active-backup","balance-xor","broadcast","802.3ad","balance-tlb","balance-alb"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypeModePropEnum = append(metaDataNetworkBondsConfigTypeModePropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigModeBalanceRr captures enum value "balance-rr"
	MetaDataNetworkBondsConfigModeBalanceRr string = "balance-rr"

	// MetaDataNetworkBondsConfigModeActiveBackup captures enum value "active-backup"
	MetaDataNetworkBondsConfigModeActiveBackup string = "active-backup"

	// MetaDataNetworkBondsConfigModeBalanceXor captures enum value "balance-xor"
	MetaDataNetworkBondsConfigModeBalanceXor string = "balance-xor"

	// MetaDataNetworkBondsConfigModeBroadcast captures enum value "broadcast"
	MetaDataNetworkBondsConfigModeBroadcast string = "broadcast"

	// MetaDataNetworkBondsConfigModeNr8023ad captures enum value "802.3ad"
	MetaDataNetworkBondsConfigModeNr8023ad string = "802.3ad"

	// MetaDataNetworkBondsConfigModeBalanceTlb captures enum value "balance-tlb"
	MetaDataNetworkBondsConfigModeBalanceTlb string = "balance-tlb"

	// MetaDataNetworkBondsConfigModeBalanceAlb captures enum value "balance-alb"
	MetaDataNetworkBondsConfigModeBalanceAlb string = "balance-alb"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataNetworkBondsConfig) validateNameservers(formats strfmt.Registry) error {

	if swag.IsZero(m.Nameservers) { // not required
		return nil
	}

	if m.Nameservers != nil {
		if err := m.Nameservers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nameservers")
			}
			return err
		}
	}

	return nil
}

var metaDataNetworkBondsConfigTypePrimaryReselectPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","better","failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypePrimaryReselectPolicyPropEnum = append(metaDataNetworkBondsConfigTypePrimaryReselectPolicyPropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigPrimaryReselectPolicyAlways captures enum value "always"
	MetaDataNetworkBondsConfigPrimaryReselectPolicyAlways string = "always"

	// MetaDataNetworkBondsConfigPrimaryReselectPolicyBetter captures enum value "better"
	MetaDataNetworkBondsConfigPrimaryReselectPolicyBetter string = "better"

	// MetaDataNetworkBondsConfigPrimaryReselectPolicyFailure captures enum value "failure"
	MetaDataNetworkBondsConfigPrimaryReselectPolicyFailure string = "failure"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validatePrimaryReselectPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypePrimaryReselectPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validatePrimaryReselectPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryReselectPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrimaryReselectPolicyEnum("primary-reselect-policy", "body", m.PrimaryReselectPolicy); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataNetworkBondsConfig) validateRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var metaDataNetworkBondsConfigTypeTransmitHashPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["layer2","layer2+3","layer3+4","encap2+3","encap3+4"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metaDataNetworkBondsConfigTypeTransmitHashPolicyPropEnum = append(metaDataNetworkBondsConfigTypeTransmitHashPolicyPropEnum, v)
	}
}

const (

	// MetaDataNetworkBondsConfigTransmitHashPolicyLayer2 captures enum value "layer2"
	MetaDataNetworkBondsConfigTransmitHashPolicyLayer2 string = "layer2"

	// MetaDataNetworkBondsConfigTransmitHashPolicyLayer23 captures enum value "layer2+3"
	MetaDataNetworkBondsConfigTransmitHashPolicyLayer23 string = "layer2+3"

	// MetaDataNetworkBondsConfigTransmitHashPolicyLayer34 captures enum value "layer3+4"
	MetaDataNetworkBondsConfigTransmitHashPolicyLayer34 string = "layer3+4"

	// MetaDataNetworkBondsConfigTransmitHashPolicyEncap23 captures enum value "encap2+3"
	MetaDataNetworkBondsConfigTransmitHashPolicyEncap23 string = "encap2+3"

	// MetaDataNetworkBondsConfigTransmitHashPolicyEncap34 captures enum value "encap3+4"
	MetaDataNetworkBondsConfigTransmitHashPolicyEncap34 string = "encap3+4"
)

// prop value enum
func (m *MetaDataNetworkBondsConfig) validateTransmitHashPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metaDataNetworkBondsConfigTypeTransmitHashPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetaDataNetworkBondsConfig) validateTransmitHashPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.TransmitHashPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransmitHashPolicyEnum("transmit-hash-policy", "body", m.TransmitHashPolicy); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetaDataNetworkBondsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaDataNetworkBondsConfig) UnmarshalBinary(b []byte) error {
	var res MetaDataNetworkBondsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
