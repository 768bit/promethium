// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaDataNetworkConfig meta data network config
// swagger:model MetaDataNetworkConfig
type MetaDataNetworkConfig struct {

	// bonds
	Bonds map[string]MetaDataNetworkBondsConfig `json:"bonds,omitempty"`

	// bridges
	Bridges map[string]MetaDataNetworkBridgesConfig `json:"bridges,omitempty"`

	// interfaces
	Interfaces []*MetaDataNetworkInterfaceConfig `json:"interfaces"`

	// routes
	Routes []*MetaDataNetworkRoutesConfig `json:"routes" xml:"route"`

	// vlans
	Vlans map[string]MetaDataNetworkVlansConfig `json:"vlans,omitempty"`
}

// Validate validates this meta data network config
func (m *MetaDataNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBonds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBridges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaDataNetworkConfig) validateBonds(formats strfmt.Registry) error {

	if swag.IsZero(m.Bonds) { // not required
		return nil
	}

	for k := range m.Bonds {

		if err := validate.Required("bonds"+"."+k, "body", m.Bonds[k]); err != nil {
			return err
		}
		if val, ok := m.Bonds[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *MetaDataNetworkConfig) validateBridges(formats strfmt.Registry) error {

	if swag.IsZero(m.Bridges) { // not required
		return nil
	}

	for k := range m.Bridges {

		if err := validate.Required("bridges"+"."+k, "body", m.Bridges[k]); err != nil {
			return err
		}
		if val, ok := m.Bridges[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *MetaDataNetworkConfig) validateInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.Interfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Interfaces); i++ {
		if swag.IsZero(m.Interfaces[i]) { // not required
			continue
		}

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MetaDataNetworkConfig) validateRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MetaDataNetworkConfig) validateVlans(formats strfmt.Registry) error {

	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	for k := range m.Vlans {

		if err := validate.Required("vlans"+"."+k, "body", m.Vlans[k]); err != nil {
			return err
		}
		if val, ok := m.Vlans[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetaDataNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaDataNetworkConfig) UnmarshalBinary(b []byte) error {
	var res MetaDataNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
