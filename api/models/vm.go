// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VM VM
// swagger:model VM
type VM struct {

	// auto start
	AutoStart bool `json:"autoStart,omitempty"`

	// boot cmd
	BootCmd string `json:"bootCmd,omitempty"`

	// cluster ID
	// Format: uuid4
	ClusterID strfmt.UUID4 `json:"clusterID,omitempty"`

	// clustered
	Clustered bool `json:"clustered,omitempty"`

	// cpus
	Cpus int64 `json:"cpus,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// disks
	Disks []*VMDisk `json:"disks" xml:"disk"`

	// entry point
	EntryPoint string `json:"entryPoint,omitempty"`

	// host node
	HostNode string `json:"hostNode,omitempty"`

	// host node ID
	// Format: uuid4
	HostNodeID strfmt.UUID4 `json:"hostNodeID,omitempty"`

	// id
	// Format: uuid4
	ID strfmt.UUID4 `json:"id,omitempty"`

	// memory
	Memory int64 `json:"memory,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network
	Network *MetaDataNetworkConfig `json:"network,omitempty"`

	// started at
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`

	// VM status
	// Enum: [starting started restarting stopping stopped]
	Status string `json:"status,omitempty"`

	// stopped at
	// Format: date-time
	StoppedAt strfmt.DateTime `json:"stoppedAt,omitempty"`

	// type
	// Enum: [firecracker-standard firecracker-osv qemu-standard]
	Type string `json:"type,omitempty"`

	// volumes
	Volumes []*VMVolume `json:"volumes" xml:"volume"`
}

// Validate validates this VM
func (m *VM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoppedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VM) validateClusterID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.FormatOf("clusterID", "body", "uuid4", m.ClusterID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VM) validateHostNodeID(formats strfmt.Registry) error {

	if swag.IsZero(m.HostNodeID) { // not required
		return nil
	}

	if err := validate.FormatOf("hostNodeID", "body", "uuid4", m.HostNodeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *VM) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var vmTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["starting","started","restarting","stopping","stopped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmTypeStatusPropEnum = append(vmTypeStatusPropEnum, v)
	}
}

const (

	// VMStatusStarting captures enum value "starting"
	VMStatusStarting string = "starting"

	// VMStatusStarted captures enum value "started"
	VMStatusStarted string = "started"

	// VMStatusRestarting captures enum value "restarting"
	VMStatusRestarting string = "restarting"

	// VMStatusStopping captures enum value "stopping"
	VMStatusStopping string = "stopping"

	// VMStatusStopped captures enum value "stopped"
	VMStatusStopped string = "stopped"
)

// prop value enum
func (m *VM) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VM) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateStoppedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StoppedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("stoppedAt", "body", "date-time", m.StoppedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var vmTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["firecracker-standard","firecracker-osv","qemu-standard"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmTypeTypePropEnum = append(vmTypeTypePropEnum, v)
	}
}

const (

	// VMTypeFirecrackerStandard captures enum value "firecracker-standard"
	VMTypeFirecrackerStandard string = "firecracker-standard"

	// VMTypeFirecrackerOsv captures enum value "firecracker-osv"
	VMTypeFirecrackerOsv string = "firecracker-osv"

	// VMTypeQemuStandard captures enum value "qemu-standard"
	VMTypeQemuStandard string = "qemu-standard"
)

// prop value enum
func (m *VM) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VM) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *VM) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VM) UnmarshalBinary(b []byte) error {
	var res VM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
