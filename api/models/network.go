// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Network network
// swagger:model Network
type Network struct {

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	// Format: uuid4
	ID strfmt.UUID4 `json:"id,omitempty"`

	// master interface
	MasterInterface *NetworkMasterInterface `json:"masterInterface,omitempty"`

	// type
	// Enum: [linux ovs]
	Type string `json:"type,omitempty"`
}

// Validate validates this network
func (m *Network) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Network) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Network) validateMasterInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.MasterInterface) { // not required
		return nil
	}

	if m.MasterInterface != nil {
		if err := m.MasterInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("masterInterface")
			}
			return err
		}
	}

	return nil
}

var networkTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["linux","ovs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkTypeTypePropEnum = append(networkTypeTypePropEnum, v)
	}
}

const (

	// NetworkTypeLinux captures enum value "linux"
	NetworkTypeLinux string = "linux"

	// NetworkTypeOvs captures enum value "ovs"
	NetworkTypeOvs string = "ovs"
)

// prop value enum
func (m *Network) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Network) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Network) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Network) UnmarshalBinary(b []byte) error {
	var res Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
