// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMListItem VM list item
// swagger:model VMListItem
type VMListItem struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	// Format: uuid4
	ID strfmt.UUID4 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// started at
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`

	// VM status
	// Enum: [starting started restarting stopping stopped]
	Status string `json:"status,omitempty"`

	// stopped at
	// Format: date-time
	StoppedAt strfmt.DateTime `json:"stoppedAt,omitempty"`
}

// Validate validates this VM list item
func (m *VMListItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoppedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMListItem) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VMListItem) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VMListItem) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var vmListItemTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["starting","started","restarting","stopping","stopped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmListItemTypeStatusPropEnum = append(vmListItemTypeStatusPropEnum, v)
	}
}

const (

	// VMListItemStatusStarting captures enum value "starting"
	VMListItemStatusStarting string = "starting"

	// VMListItemStatusStarted captures enum value "started"
	VMListItemStatusStarted string = "started"

	// VMListItemStatusRestarting captures enum value "restarting"
	VMListItemStatusRestarting string = "restarting"

	// VMListItemStatusStopping captures enum value "stopping"
	VMListItemStatusStopping string = "stopping"

	// VMListItemStatusStopped captures enum value "stopped"
	VMListItemStatusStopped string = "stopped"
)

// prop value enum
func (m *VMListItem) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmListItemTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VMListItem) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *VMListItem) validateStoppedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StoppedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("stoppedAt", "body", "date-time", m.StoppedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMListItem) UnmarshalBinary(b []byte) error {
	var res VMListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
