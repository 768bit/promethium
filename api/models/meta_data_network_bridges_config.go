// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaDataNetworkBridgesConfig meta data network bridges config
// swagger:model MetaDataNetworkBridgesConfig
type MetaDataNetworkBridgesConfig struct {

	// addresses
	Addresses []string `json:"addresses"`

	// ageing time
	AgeingTime int32 `json:"ageing-time,omitempty"`

	// dhcp4
	Dhcp4 bool `json:"dhcp4,omitempty"`

	// dhcp6
	Dhcp6 bool `json:"dhcp6,omitempty"`

	// forward delay
	ForwardDelay int32 `json:"forward-delay,omitempty"`

	// gateway4
	// Format: ipv4
	Gateway4 strfmt.IPv4 `json:"gateway4,omitempty"`

	// gateway6
	// Format: ipv6
	Gateway6 strfmt.IPv6 `json:"gateway6,omitempty"`

	// hello time
	HelloTime int32 `json:"hello-time,omitempty"`

	// interfaces
	Interfaces []string `json:"interfaces"`

	// max age
	MaxAge int32 `json:"max-age,omitempty"`

	// mtu
	Mtu int32 `json:"mtu,omitempty"`

	// nameservers
	Nameservers *MetaDataNetworkEthernetsDNSConfig `json:"nameservers,omitempty"`

	// path cost
	PathCost int32 `json:"path-cost,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// routes
	Routes []*MetaDataNetworkRoutesConfig `json:"routes"`

	// stp
	Stp *bool `json:"stp,omitempty"`
}

// Validate validates this meta data network bridges config
func (m *MetaDataNetworkBridgesConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameservers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaDataNetworkBridgesConfig) validateGateway4(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway4) { // not required
		return nil
	}

	if err := validate.FormatOf("gateway4", "body", "ipv4", m.Gateway4.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataNetworkBridgesConfig) validateGateway6(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway6) { // not required
		return nil
	}

	if err := validate.FormatOf("gateway6", "body", "ipv6", m.Gateway6.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MetaDataNetworkBridgesConfig) validateNameservers(formats strfmt.Registry) error {

	if swag.IsZero(m.Nameservers) { // not required
		return nil
	}

	if m.Nameservers != nil {
		if err := m.Nameservers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nameservers")
			}
			return err
		}
	}

	return nil
}

func (m *MetaDataNetworkBridgesConfig) validateRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetaDataNetworkBridgesConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaDataNetworkBridgesConfig) UnmarshalBinary(b []byte) error {
	var res MetaDataNetworkBridgesConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
