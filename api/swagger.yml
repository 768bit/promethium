---
swagger: "2.0"
info:
  description: API for Promethium Daemon
  title: Promethium Daemon API
  version: 1.0.0
consumes:
  - application/com.768bit.promethium.daemon.v1+json
produces:
  - application/com.768bit.promethium.daemon.v1+json
schemes:
  - http
paths:
  /vms:
    get:
      tags:
        - vms
      summary: "Get a list of VMs"
      description: "Returns a list of VMs"
      operationId: "getVMList"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: since
          in: query
          type: integer
          format: int64
        - name: limit
          in: query
          type: integer
          format: int32
          default: 20
      responses:
        200:
          description: "Array of VMs"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/VMListItem'
        default:
          description: "unexpected error"
          schema:
            $ref: '#/definitions/error'
    post:
      tags:
        - vms
      summary: "Create a VM instance"
      description: "Create an instance of VM"
      operationId: "createVM"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmConfig"
          in: "body"
          description: "Create new VM instance"
          required: true
          schema:
            $ref: "#/definitions/NewVM"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VM"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
  /vms/{vmID}:
    get:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "getVM"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VM"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
    put:
      tags:
        - vms
      summary: "Create a VM instance"
      description: "Create an instance of VM"
      operationId: "updateVM"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "vmConfig"
          in: "body"
          description: "Pet to add to the store"
          required: true
          schema:
            $ref: "#/definitions/UpdateVM"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VM"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
    delete:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "deleteVM"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
  /vms/{vmID}/interfaces:
    get:
      tags:
        - vms
      summary: "Get a list of VM Network Interfaces"
      description: "Returns a list of VM Network Itnerfaces"
      operationId: "getVMInterfaceList"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to use"
          required: true
          type: "string"
        - name: since
          in: query
          type: integer
          format: int64
        - name: limit
          in: query
          type: integer
          format: int32
          default: 20
      responses:
        200:
          description: "Array of VMs"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/VMInterface'
        default:
          description: "unexpected error"
          schema:
            $ref: '#/definitions/error'
    post:
      tags:
        - vms
      summary: "Create a VM instance"
      description: "Create an instance of VM"
      operationId: "createVMInterface"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to use"
          required: true
          type: "string"
        - name: "vmConfig"
          in: "body"
          description: "Create new VM instance"
          required: true
          schema:
            $ref: "#/definitions/NewVMInterface"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VMInterface"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
  /vms/{vmID}/interfaces/{interfaceID}:
    get:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "getVMInterace"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "interfaceID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/VMInterface'
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
    put:
      tags:
        - vms
      summary: "Update a VM Interface instance"
      description: "Update an instance of VM interface"
      operationId: "updateVMInterface"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "interfaceID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
        - name: "vmInterfaceConfig"
          in: "body"
          description: "Pet to add to the store"
          required: true
          schema:
            $ref: "#/definitions/UpdateVMInterface"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VMInterface"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM Interface not found"
    delete:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "deleteVMInterface"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "interfaceID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
  /vms/{vmID}/drives:
    get:
      tags:
        - vms
      summary: "Get a list of VM Network Interfaces"
      description: "Returns a list of VM Network Itnerfaces"
      operationId: "getVMDriveList"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to use"
          required: true
          type: "string"
        - name: since
          in: query
          type: integer
          format: int64
        - name: limit
          in: query
          type: integer
          format: int32
          default: 20
      responses:
        200:
          description: "Array of VMs"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/VMDrive'
        default:
          description: "unexpected error"
          schema:
            $ref: '#/definitions/error'
    post:
      tags:
        - vms
      summary: "Create a VM instance"
      description: "Create an instance of VM"
      operationId: "createVMDrive"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to use"
          required: true
          type: "string"
        - name: "vmConfig"
          in: "body"
          description: "Create new VM instance"
          required: true
          schema:
            $ref: "#/definitions/NewVMDrive"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VMDrive"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
  /vms/{vmID}/drives/{driveID}:
    get:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "getVMDrive"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "driveID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/VMDrive'
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
    put:
      tags:
        - vms
      summary: "Update a VM Interface instance"
      description: "Update an instance of VM interface"
      operationId: "updateVMDrive"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "driveID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
        - name: "vmInterfaceConfig"
          in: "body"
          description: "Pet to add to the store"
          required: true
          schema:
            $ref: "#/definitions/UpdateVMInterface"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UpdateVMDrive"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM Interface not found"
    delete:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "deleteVMDrive"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "driveID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
  /vms/{vmID}/volumes:
    get:
      tags:
        - vms
      summary: "Get a list of VM Network Interfaces"
      description: "Returns a list of VM Network Itnerfaces"
      operationId: "getVMVolumeList"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to use"
          required: true
          type: "string"
        - name: since
          in: query
          type: integer
          format: int64
        - name: limit
          in: query
          type: integer
          format: int32
          default: 20
      responses:
        200:
          description: "Array of VMs"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/VMVolume'
        default:
          description: "unexpected error"
          schema:
            $ref: '#/definitions/error'
    post:
      tags:
        - vms
      summary: "Create a VM instance"
      description: "Create an instance of VM"
      operationId: "createVMVolume"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to use"
          required: true
          type: "string"
        - name: "vmConfig"
          in: "body"
          description: "Create new VM instance"
          required: true
          schema:
            $ref: "#/definitions/NewVMVolume"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VMInterface"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
  /vms/{vmID}/volumes/{volumeID}:
    get:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "getVMVolume"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "volumeID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/VMVolume'
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
    put:
      tags:
        - vms
      summary: "Update a VM Interface instance"
      description: "Update an instance of VM interface"
      operationId: "updateVMVolume"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "volumeID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
        - name: "vmInterfaceConfig"
          in: "body"
          description: "Pet to add to the store"
          required: true
          schema:
            $ref: "#/definitions/UpdateVMVolume"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VMVolume"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM Interface not found"
    delete:
      tags:
        - vms
      summary: "Return a VM instance"
      description: "Returns an isntance of VM"
      operationId: "deleteVMVolume"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "vmID"
          in: "path"
          description: "ID of VM to return"
          required: true
          type: "string"
        - name: "volumeID"
          in: "path"
          description: "ID of VM Interface to use"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "Invalid ID supplied"
        404:
          description: "VM not found"
definitions:
  item:
    type: object
    required:
      - description
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      description:
        type: string
        minLength: 1
      completed:
        type: boolean
  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  VMListItem:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
      status:
        type: string
        description: "VM status"
        enum:
          - "starting"
          - "started"
          - "restarting"
          - "stopping"
          - "stopped"
      name:
        type: string
    xml:
      name: "VMListItem"
  NewVM:
    type: "object"
    properties:
      name:
        type: string
      cpus:
        type: integer
        format: int64
      memory:
        type: integer
        format: int64
      volumes:
        type: "array"
        xml:
          name: "volume"
          wrapped: true
        items:
          $ref: "#/definitions/VMVolume"
      drives:
        type: "array"
        xml:
          name: "drive"
          wrapped: true
        items:
          $ref: "#/definitions/VMDrive"
      interfaces:
        type: "array"
        xml:
          name: "interface"
          wrapped: true
        items:
          $ref: '#/definitions/VMInterface'
    xml:
      name: "NewVM"
  UpdateVM:
    type: "object"
    properties:
      name:
        type: string
      cpus:
        type: integer
        format: int64
      memory:
        type: integer
        format: int64
    xml:
      name: "UpdateVM"
  VM:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
      status:
        type: string
        description: "VM status"
        enum:
          - "starting"
          - "started"
          - "restarting"
          - "stopping"
          - "stopped"
      name:
        type: string
      cpus:
        type: integer
        format: int64
      memory:
        type: integer
        format: int64
      volumes:
        type: "array"
        xml:
          name: "volume"
          wrapped: true
        items:
          $ref: "#/definitions/VMVolume"
      drives:
        type: "array"
        xml:
          name: "drive"
          wrapped: true
        items:
          $ref: "#/definitions/VMDrive"
      interfaces:
        type: "array"
        xml:
          name: "interface"
          wrapped: true
        items:
          $ref: "#/definitions/VMInterface"
    xml:
      name: "VM"
  VMVolume:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMVolume"
  UpdateVMVolume:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMVolume"
  NewVMVolume:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMVolume"
  VMDrive:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMDrive"
  UpdateVMDrive:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMDrive"
  NewVMDrive:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMDrive"
  VMInterface:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMInterface"
  NewVMInterface:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMInterface"
  UpdateVMInterface:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid4"
    xml:
      name: "VMInterface"
