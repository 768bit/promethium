// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageStorageIDDisks Get storage item
*/
func (a *Client) GetStorageStorageIDDisks(params *GetStorageStorageIDDisksParams) (*GetStorageStorageIDDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageStorageIDDisksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageStorageIDDisks",
		Method:             "GET",
		PathPattern:        "/storage/{storageID}/disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageStorageIDDisksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageStorageIDDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStorageStorageIDDisks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStorageStorageIDImages Get storage item
*/
func (a *Client) GetStorageStorageIDImages(params *GetStorageStorageIDImagesParams) (*GetStorageStorageIDImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageStorageIDImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageStorageIDImages",
		Method:             "GET",
		PathPattern:        "/storage/{storageID}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageStorageIDImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageStorageIDImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStorageStorageIDImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStorageStorageIDKernels Get storage item
*/
func (a *Client) GetStorageStorageIDKernels(params *GetStorageStorageIDKernelsParams) (*GetStorageStorageIDKernelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageStorageIDKernelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageStorageIDKernels",
		Method:             "GET",
		PathPattern:        "/storage/{storageID}/kernels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageStorageIDKernelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageStorageIDKernelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStorageStorageIDKernels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStorage Create new storage
*/
func (a *Client) CreateStorage(params *CreateStorageParams) (*CreateStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorage",
		Method:             "POST",
		PathPattern:        "/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DestroyStorage Remove storage item
*/
func (a *Client) DestroyStorage(params *DestroyStorageParams) (*DestroyStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "destroyStorage",
		Method:             "DELETE",
		PathPattern:        "/storage/{storageID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DestroyStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DestroyStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for destroyStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStorage Get storage item
*/
func (a *Client) GetStorage(params *GetStorageParams) (*GetStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStorage",
		Method:             "GET",
		PathPattern:        "/storage/{storageID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStorageList Get all storage
*/
func (a *Client) GetStorageList(params *GetStorageListParams) (*GetStorageListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStorageList",
		Method:             "GET",
		PathPattern:        "/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStorageList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStorage Update storage item
*/
func (a *Client) UpdateStorage(params *UpdateStorageParams) (*UpdateStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStorage",
		Method:             "PUT",
		PathPattern:        "/storage/{storageID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
