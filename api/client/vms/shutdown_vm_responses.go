// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// ShutdownVMReader is a Reader for the ShutdownVM structure.
type ShutdownVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShutdownVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewShutdownVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewShutdownVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewShutdownVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewShutdownVMOK creates a ShutdownVMOK with default headers values
func NewShutdownVMOK() *ShutdownVMOK {
	return &ShutdownVMOK{}
}

/*ShutdownVMOK handles this case with default header values.

successful operation
*/
type ShutdownVMOK struct {
	Payload *models.VM
}

func (o *ShutdownVMOK) Error() string {
	return fmt.Sprintf("[GET /vms/{vmID}/shutdown][%d] shutdownVmOK  %+v", 200, o.Payload)
}

func (o *ShutdownVMOK) GetPayload() *models.VM {
	return o.Payload
}

func (o *ShutdownVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VM)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShutdownVMBadRequest creates a ShutdownVMBadRequest with default headers values
func NewShutdownVMBadRequest() *ShutdownVMBadRequest {
	return &ShutdownVMBadRequest{}
}

/*ShutdownVMBadRequest handles this case with default header values.

Invalid ID supplied
*/
type ShutdownVMBadRequest struct {
}

func (o *ShutdownVMBadRequest) Error() string {
	return fmt.Sprintf("[GET /vms/{vmID}/shutdown][%d] shutdownVmBadRequest ", 400)
}

func (o *ShutdownVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewShutdownVMNotFound creates a ShutdownVMNotFound with default headers values
func NewShutdownVMNotFound() *ShutdownVMNotFound {
	return &ShutdownVMNotFound{}
}

/*ShutdownVMNotFound handles this case with default header values.

VM not found
*/
type ShutdownVMNotFound struct {
}

func (o *ShutdownVMNotFound) Error() string {
	return fmt.Sprintf("[GET /vms/{vmID}/shutdown][%d] shutdownVmNotFound ", 404)
}

func (o *ShutdownVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
