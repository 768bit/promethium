// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// UpdateVMDiskReader is a Reader for the UpdateVMDisk structure.
type UpdateVMDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVMDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVMDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVMDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVMDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateVMDiskDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVMDiskOK creates a UpdateVMDiskOK with default headers values
func NewUpdateVMDiskOK() *UpdateVMDiskOK {
	return &UpdateVMDiskOK{}
}

/*UpdateVMDiskOK handles this case with default header values.

successful operation
*/
type UpdateVMDiskOK struct {
	Payload *models.UpdateVMDisk
}

func (o *UpdateVMDiskOK) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/disks/{diskID}][%d] updateVmDiskOK  %+v", 200, o.Payload)
}

func (o *UpdateVMDiskOK) GetPayload() *models.UpdateVMDisk {
	return o.Payload
}

func (o *UpdateVMDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateVMDisk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMDiskBadRequest creates a UpdateVMDiskBadRequest with default headers values
func NewUpdateVMDiskBadRequest() *UpdateVMDiskBadRequest {
	return &UpdateVMDiskBadRequest{}
}

/*UpdateVMDiskBadRequest handles this case with default header values.

Invalid ID supplied
*/
type UpdateVMDiskBadRequest struct {
}

func (o *UpdateVMDiskBadRequest) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/disks/{diskID}][%d] updateVmDiskBadRequest ", 400)
}

func (o *UpdateVMDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMDiskNotFound creates a UpdateVMDiskNotFound with default headers values
func NewUpdateVMDiskNotFound() *UpdateVMDiskNotFound {
	return &UpdateVMDiskNotFound{}
}

/*UpdateVMDiskNotFound handles this case with default header values.

VM Interface not found
*/
type UpdateVMDiskNotFound struct {
}

func (o *UpdateVMDiskNotFound) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/disks/{diskID}][%d] updateVmDiskNotFound ", 404)
}

func (o *UpdateVMDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMDiskDefault creates a UpdateVMDiskDefault with default headers values
func NewUpdateVMDiskDefault(code int) *UpdateVMDiskDefault {
	return &UpdateVMDiskDefault{
		_statusCode: code,
	}
}

/*UpdateVMDiskDefault handles this case with default header values.

unexpected error
*/
type UpdateVMDiskDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update VM disk default response
func (o *UpdateVMDiskDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVMDiskDefault) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/disks/{diskID}][%d] updateVMDisk default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateVMDiskDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVMDiskDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
