// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// CreateVMDiskReader is a Reader for the CreateVMDisk structure.
type CreateVMDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVMDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVMDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateVMDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateVMDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateVMDiskDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateVMDiskOK creates a CreateVMDiskOK with default headers values
func NewCreateVMDiskOK() *CreateVMDiskOK {
	return &CreateVMDiskOK{}
}

/*CreateVMDiskOK handles this case with default header values.

successful operation
*/
type CreateVMDiskOK struct {
	Payload *models.VMDisk
}

func (o *CreateVMDiskOK) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/disks][%d] createVmDiskOK  %+v", 200, o.Payload)
}

func (o *CreateVMDiskOK) GetPayload() *models.VMDisk {
	return o.Payload
}

func (o *CreateVMDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VMDisk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMDiskBadRequest creates a CreateVMDiskBadRequest with default headers values
func NewCreateVMDiskBadRequest() *CreateVMDiskBadRequest {
	return &CreateVMDiskBadRequest{}
}

/*CreateVMDiskBadRequest handles this case with default header values.

Invalid ID supplied
*/
type CreateVMDiskBadRequest struct {
}

func (o *CreateVMDiskBadRequest) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/disks][%d] createVmDiskBadRequest ", 400)
}

func (o *CreateVMDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateVMDiskNotFound creates a CreateVMDiskNotFound with default headers values
func NewCreateVMDiskNotFound() *CreateVMDiskNotFound {
	return &CreateVMDiskNotFound{}
}

/*CreateVMDiskNotFound handles this case with default header values.

VM not found
*/
type CreateVMDiskNotFound struct {
}

func (o *CreateVMDiskNotFound) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/disks][%d] createVmDiskNotFound ", 404)
}

func (o *CreateVMDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateVMDiskDefault creates a CreateVMDiskDefault with default headers values
func NewCreateVMDiskDefault(code int) *CreateVMDiskDefault {
	return &CreateVMDiskDefault{
		_statusCode: code,
	}
}

/*CreateVMDiskDefault handles this case with default header values.

unexpected error
*/
type CreateVMDiskDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create VM disk default response
func (o *CreateVMDiskDefault) Code() int {
	return o._statusCode
}

func (o *CreateVMDiskDefault) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/disks][%d] createVMDisk default  %+v", o._statusCode, o.Payload)
}

func (o *CreateVMDiskDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVMDiskDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
