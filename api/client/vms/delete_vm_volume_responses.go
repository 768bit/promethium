// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// DeleteVMVolumeReader is a Reader for the DeleteVMVolume structure.
type DeleteVMVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVMVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVMVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVMVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVMVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteVMVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteVMVolumeOK creates a DeleteVMVolumeOK with default headers values
func NewDeleteVMVolumeOK() *DeleteVMVolumeOK {
	return &DeleteVMVolumeOK{}
}

/*DeleteVMVolumeOK handles this case with default header values.

successful operation
*/
type DeleteVMVolumeOK struct {
	Payload *models.Item
}

func (o *DeleteVMVolumeOK) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/volumes/{volumeID}][%d] deleteVmVolumeOK  %+v", 200, o.Payload)
}

func (o *DeleteVMVolumeOK) GetPayload() *models.Item {
	return o.Payload
}

func (o *DeleteVMVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Item)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVMVolumeBadRequest creates a DeleteVMVolumeBadRequest with default headers values
func NewDeleteVMVolumeBadRequest() *DeleteVMVolumeBadRequest {
	return &DeleteVMVolumeBadRequest{}
}

/*DeleteVMVolumeBadRequest handles this case with default header values.

Invalid ID supplied
*/
type DeleteVMVolumeBadRequest struct {
}

func (o *DeleteVMVolumeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/volumes/{volumeID}][%d] deleteVmVolumeBadRequest ", 400)
}

func (o *DeleteVMVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVMVolumeNotFound creates a DeleteVMVolumeNotFound with default headers values
func NewDeleteVMVolumeNotFound() *DeleteVMVolumeNotFound {
	return &DeleteVMVolumeNotFound{}
}

/*DeleteVMVolumeNotFound handles this case with default header values.

VM not found
*/
type DeleteVMVolumeNotFound struct {
}

func (o *DeleteVMVolumeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/volumes/{volumeID}][%d] deleteVmVolumeNotFound ", 404)
}

func (o *DeleteVMVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVMVolumeDefault creates a DeleteVMVolumeDefault with default headers values
func NewDeleteVMVolumeDefault(code int) *DeleteVMVolumeDefault {
	return &DeleteVMVolumeDefault{
		_statusCode: code,
	}
}

/*DeleteVMVolumeDefault handles this case with default header values.

unexpected error
*/
type DeleteVMVolumeDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete VM volume default response
func (o *DeleteVMVolumeDefault) Code() int {
	return o._statusCode
}

func (o *DeleteVMVolumeDefault) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/volumes/{volumeID}][%d] deleteVMVolume default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVMVolumeDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteVMVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
