// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// NewUpdateVMParams creates a new UpdateVMParams object
// with the default values initialized.
func NewUpdateVMParams() *UpdateVMParams {
	var ()
	return &UpdateVMParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateVMParamsWithTimeout creates a new UpdateVMParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateVMParamsWithTimeout(timeout time.Duration) *UpdateVMParams {
	var ()
	return &UpdateVMParams{

		timeout: timeout,
	}
}

// NewUpdateVMParamsWithContext creates a new UpdateVMParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateVMParamsWithContext(ctx context.Context) *UpdateVMParams {
	var ()
	return &UpdateVMParams{

		Context: ctx,
	}
}

// NewUpdateVMParamsWithHTTPClient creates a new UpdateVMParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateVMParamsWithHTTPClient(client *http.Client) *UpdateVMParams {
	var ()
	return &UpdateVMParams{
		HTTPClient: client,
	}
}

/*UpdateVMParams contains all the parameters to send to the API endpoint
for the update VM operation typically these are written to a http.Request
*/
type UpdateVMParams struct {

	/*VMConfig
	  Pet to add to the store

	*/
	VMConfig *models.UpdateVM
	/*VMID
	  ID of VM to return

	*/
	VMID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update VM params
func (o *UpdateVMParams) WithTimeout(timeout time.Duration) *UpdateVMParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update VM params
func (o *UpdateVMParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update VM params
func (o *UpdateVMParams) WithContext(ctx context.Context) *UpdateVMParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update VM params
func (o *UpdateVMParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update VM params
func (o *UpdateVMParams) WithHTTPClient(client *http.Client) *UpdateVMParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update VM params
func (o *UpdateVMParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithVMConfig adds the vMConfig to the update VM params
func (o *UpdateVMParams) WithVMConfig(vMConfig *models.UpdateVM) *UpdateVMParams {
	o.SetVMConfig(vMConfig)
	return o
}

// SetVMConfig adds the vmConfig to the update VM params
func (o *UpdateVMParams) SetVMConfig(vMConfig *models.UpdateVM) {
	o.VMConfig = vMConfig
}

// WithVMID adds the vMID to the update VM params
func (o *UpdateVMParams) WithVMID(vMID string) *UpdateVMParams {
	o.SetVMID(vMID)
	return o
}

// SetVMID adds the vmId to the update VM params
func (o *UpdateVMParams) SetVMID(vMID string) {
	o.VMID = vMID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateVMParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.VMConfig != nil {
		if err := r.SetBodyParam(o.VMConfig); err != nil {
			return err
		}
	}

	// path param vmID
	if err := r.SetPathParam("vmID", o.VMID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
