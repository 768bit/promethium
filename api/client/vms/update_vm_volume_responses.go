// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// UpdateVMVolumeReader is a Reader for the UpdateVMVolume structure.
type UpdateVMVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVMVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVMVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVMVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVMVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateVMVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVMVolumeOK creates a UpdateVMVolumeOK with default headers values
func NewUpdateVMVolumeOK() *UpdateVMVolumeOK {
	return &UpdateVMVolumeOK{}
}

/*UpdateVMVolumeOK handles this case with default header values.

successful operation
*/
type UpdateVMVolumeOK struct {
	Payload *models.VMVolume
}

func (o *UpdateVMVolumeOK) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/volumes/{volumeID}][%d] updateVmVolumeOK  %+v", 200, o.Payload)
}

func (o *UpdateVMVolumeOK) GetPayload() *models.VMVolume {
	return o.Payload
}

func (o *UpdateVMVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VMVolume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMVolumeBadRequest creates a UpdateVMVolumeBadRequest with default headers values
func NewUpdateVMVolumeBadRequest() *UpdateVMVolumeBadRequest {
	return &UpdateVMVolumeBadRequest{}
}

/*UpdateVMVolumeBadRequest handles this case with default header values.

Invalid ID supplied
*/
type UpdateVMVolumeBadRequest struct {
}

func (o *UpdateVMVolumeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/volumes/{volumeID}][%d] updateVmVolumeBadRequest ", 400)
}

func (o *UpdateVMVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMVolumeNotFound creates a UpdateVMVolumeNotFound with default headers values
func NewUpdateVMVolumeNotFound() *UpdateVMVolumeNotFound {
	return &UpdateVMVolumeNotFound{}
}

/*UpdateVMVolumeNotFound handles this case with default header values.

VM Interface not found
*/
type UpdateVMVolumeNotFound struct {
}

func (o *UpdateVMVolumeNotFound) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/volumes/{volumeID}][%d] updateVmVolumeNotFound ", 404)
}

func (o *UpdateVMVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMVolumeDefault creates a UpdateVMVolumeDefault with default headers values
func NewUpdateVMVolumeDefault(code int) *UpdateVMVolumeDefault {
	return &UpdateVMVolumeDefault{
		_statusCode: code,
	}
}

/*UpdateVMVolumeDefault handles this case with default header values.

unexpected error
*/
type UpdateVMVolumeDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update VM volume default response
func (o *UpdateVMVolumeDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVMVolumeDefault) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/volumes/{volumeID}][%d] updateVMVolume default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateVMVolumeDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVMVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
