// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// CreateVMVolumeReader is a Reader for the CreateVMVolume structure.
type CreateVMVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVMVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVMVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateVMVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateVMVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateVMVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateVMVolumeOK creates a CreateVMVolumeOK with default headers values
func NewCreateVMVolumeOK() *CreateVMVolumeOK {
	return &CreateVMVolumeOK{}
}

/*CreateVMVolumeOK handles this case with default header values.

successful operation
*/
type CreateVMVolumeOK struct {
	Payload *models.VMVolume
}

func (o *CreateVMVolumeOK) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/volumes][%d] createVmVolumeOK  %+v", 200, o.Payload)
}

func (o *CreateVMVolumeOK) GetPayload() *models.VMVolume {
	return o.Payload
}

func (o *CreateVMVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VMVolume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMVolumeBadRequest creates a CreateVMVolumeBadRequest with default headers values
func NewCreateVMVolumeBadRequest() *CreateVMVolumeBadRequest {
	return &CreateVMVolumeBadRequest{}
}

/*CreateVMVolumeBadRequest handles this case with default header values.

Invalid ID supplied
*/
type CreateVMVolumeBadRequest struct {
}

func (o *CreateVMVolumeBadRequest) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/volumes][%d] createVmVolumeBadRequest ", 400)
}

func (o *CreateVMVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateVMVolumeNotFound creates a CreateVMVolumeNotFound with default headers values
func NewCreateVMVolumeNotFound() *CreateVMVolumeNotFound {
	return &CreateVMVolumeNotFound{}
}

/*CreateVMVolumeNotFound handles this case with default header values.

VM not found
*/
type CreateVMVolumeNotFound struct {
}

func (o *CreateVMVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/volumes][%d] createVmVolumeNotFound ", 404)
}

func (o *CreateVMVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateVMVolumeDefault creates a CreateVMVolumeDefault with default headers values
func NewCreateVMVolumeDefault(code int) *CreateVMVolumeDefault {
	return &CreateVMVolumeDefault{
		_statusCode: code,
	}
}

/*CreateVMVolumeDefault handles this case with default header values.

unexpected error
*/
type CreateVMVolumeDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create VM volume default response
func (o *CreateVMVolumeDefault) Code() int {
	return o._statusCode
}

func (o *CreateVMVolumeDefault) Error() string {
	return fmt.Sprintf("[POST /vms/{vmID}/volumes][%d] createVMVolume default  %+v", o._statusCode, o.Payload)
}

func (o *CreateVMVolumeDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVMVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
