// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// DeleteVMDriveReader is a Reader for the DeleteVMDrive structure.
type DeleteVMDriveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVMDriveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVMDriveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVMDriveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVMDriveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteVMDriveDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteVMDriveOK creates a DeleteVMDriveOK with default headers values
func NewDeleteVMDriveOK() *DeleteVMDriveOK {
	return &DeleteVMDriveOK{}
}

/*DeleteVMDriveOK handles this case with default header values.

successful operation
*/
type DeleteVMDriveOK struct {
	Payload *models.Item
}

func (o *DeleteVMDriveOK) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/disks/{diskID}][%d] deleteVmDriveOK  %+v", 200, o.Payload)
}

func (o *DeleteVMDriveOK) GetPayload() *models.Item {
	return o.Payload
}

func (o *DeleteVMDriveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Item)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVMDriveBadRequest creates a DeleteVMDriveBadRequest with default headers values
func NewDeleteVMDriveBadRequest() *DeleteVMDriveBadRequest {
	return &DeleteVMDriveBadRequest{}
}

/*DeleteVMDriveBadRequest handles this case with default header values.

Invalid ID supplied
*/
type DeleteVMDriveBadRequest struct {
}

func (o *DeleteVMDriveBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/disks/{diskID}][%d] deleteVmDriveBadRequest ", 400)
}

func (o *DeleteVMDriveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVMDriveNotFound creates a DeleteVMDriveNotFound with default headers values
func NewDeleteVMDriveNotFound() *DeleteVMDriveNotFound {
	return &DeleteVMDriveNotFound{}
}

/*DeleteVMDriveNotFound handles this case with default header values.

VM not found
*/
type DeleteVMDriveNotFound struct {
}

func (o *DeleteVMDriveNotFound) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/disks/{diskID}][%d] deleteVmDriveNotFound ", 404)
}

func (o *DeleteVMDriveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVMDriveDefault creates a DeleteVMDriveDefault with default headers values
func NewDeleteVMDriveDefault(code int) *DeleteVMDriveDefault {
	return &DeleteVMDriveDefault{
		_statusCode: code,
	}
}

/*DeleteVMDriveDefault handles this case with default header values.

unexpected error
*/
type DeleteVMDriveDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete VM drive default response
func (o *DeleteVMDriveDefault) Code() int {
	return o._statusCode
}

func (o *DeleteVMDriveDefault) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/disks/{diskID}][%d] deleteVMDrive default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVMDriveDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteVMDriveDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
