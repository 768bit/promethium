// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// UpdateVMInterfaceReader is a Reader for the UpdateVMInterface structure.
type UpdateVMInterfaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVMInterfaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVMInterfaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVMInterfaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVMInterfaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateVMInterfaceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVMInterfaceOK creates a UpdateVMInterfaceOK with default headers values
func NewUpdateVMInterfaceOK() *UpdateVMInterfaceOK {
	return &UpdateVMInterfaceOK{}
}

/*UpdateVMInterfaceOK handles this case with default header values.

successful operation
*/
type UpdateVMInterfaceOK struct {
	Payload *models.MetaDataNetworkInterfaceConfig
}

func (o *UpdateVMInterfaceOK) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/interfaces/{interfaceID}][%d] updateVmInterfaceOK  %+v", 200, o.Payload)
}

func (o *UpdateVMInterfaceOK) GetPayload() *models.MetaDataNetworkInterfaceConfig {
	return o.Payload
}

func (o *UpdateVMInterfaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetaDataNetworkInterfaceConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMInterfaceBadRequest creates a UpdateVMInterfaceBadRequest with default headers values
func NewUpdateVMInterfaceBadRequest() *UpdateVMInterfaceBadRequest {
	return &UpdateVMInterfaceBadRequest{}
}

/*UpdateVMInterfaceBadRequest handles this case with default header values.

Invalid ID supplied
*/
type UpdateVMInterfaceBadRequest struct {
}

func (o *UpdateVMInterfaceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/interfaces/{interfaceID}][%d] updateVmInterfaceBadRequest ", 400)
}

func (o *UpdateVMInterfaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMInterfaceNotFound creates a UpdateVMInterfaceNotFound with default headers values
func NewUpdateVMInterfaceNotFound() *UpdateVMInterfaceNotFound {
	return &UpdateVMInterfaceNotFound{}
}

/*UpdateVMInterfaceNotFound handles this case with default header values.

VM Interface not found
*/
type UpdateVMInterfaceNotFound struct {
}

func (o *UpdateVMInterfaceNotFound) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/interfaces/{interfaceID}][%d] updateVmInterfaceNotFound ", 404)
}

func (o *UpdateVMInterfaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMInterfaceDefault creates a UpdateVMInterfaceDefault with default headers values
func NewUpdateVMInterfaceDefault(code int) *UpdateVMInterfaceDefault {
	return &UpdateVMInterfaceDefault{
		_statusCode: code,
	}
}

/*UpdateVMInterfaceDefault handles this case with default header values.

unexpected error
*/
type UpdateVMInterfaceDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update VM interface default response
func (o *UpdateVMInterfaceDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVMInterfaceDefault) Error() string {
	return fmt.Sprintf("[PUT /vms/{vmID}/interfaces/{interfaceID}][%d] updateVMInterface default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateVMInterfaceDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVMInterfaceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
