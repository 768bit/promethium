// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// GetVMDiskReader is a Reader for the GetVMDisk structure.
type GetVMDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVMDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVMDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetVMDiskDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVMDiskOK creates a GetVMDiskOK with default headers values
func NewGetVMDiskOK() *GetVMDiskOK {
	return &GetVMDiskOK{}
}

/*GetVMDiskOK handles this case with default header values.

successful operation
*/
type GetVMDiskOK struct {
	Payload *models.VMDisk
}

func (o *GetVMDiskOK) Error() string {
	return fmt.Sprintf("[GET /vms/{vmID}/disks/{diskID}][%d] getVmDiskOK  %+v", 200, o.Payload)
}

func (o *GetVMDiskOK) GetPayload() *models.VMDisk {
	return o.Payload
}

func (o *GetVMDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VMDisk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMDiskBadRequest creates a GetVMDiskBadRequest with default headers values
func NewGetVMDiskBadRequest() *GetVMDiskBadRequest {
	return &GetVMDiskBadRequest{}
}

/*GetVMDiskBadRequest handles this case with default header values.

Invalid ID supplied
*/
type GetVMDiskBadRequest struct {
}

func (o *GetVMDiskBadRequest) Error() string {
	return fmt.Sprintf("[GET /vms/{vmID}/disks/{diskID}][%d] getVmDiskBadRequest ", 400)
}

func (o *GetVMDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVMDiskNotFound creates a GetVMDiskNotFound with default headers values
func NewGetVMDiskNotFound() *GetVMDiskNotFound {
	return &GetVMDiskNotFound{}
}

/*GetVMDiskNotFound handles this case with default header values.

VM or Disk not found
*/
type GetVMDiskNotFound struct {
}

func (o *GetVMDiskNotFound) Error() string {
	return fmt.Sprintf("[GET /vms/{vmID}/disks/{diskID}][%d] getVmDiskNotFound ", 404)
}

func (o *GetVMDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVMDiskDefault creates a GetVMDiskDefault with default headers values
func NewGetVMDiskDefault(code int) *GetVMDiskDefault {
	return &GetVMDiskDefault{
		_statusCode: code,
	}
}

/*GetVMDiskDefault handles this case with default header values.

unexpected error
*/
type GetVMDiskDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get VM disk default response
func (o *GetVMDiskDefault) Code() int {
	return o._statusCode
}

func (o *GetVMDiskDefault) Error() string {
	return fmt.Sprintf("[GET /vms/{vmID}/disks/{diskID}][%d] getVMDisk default  %+v", o._statusCode, o.Payload)
}

func (o *GetVMDiskDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVMDiskDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
