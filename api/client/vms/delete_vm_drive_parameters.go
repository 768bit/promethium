// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteVMDriveParams creates a new DeleteVMDriveParams object
// with the default values initialized.
func NewDeleteVMDriveParams() *DeleteVMDriveParams {
	var ()
	return &DeleteVMDriveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteVMDriveParamsWithTimeout creates a new DeleteVMDriveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteVMDriveParamsWithTimeout(timeout time.Duration) *DeleteVMDriveParams {
	var ()
	return &DeleteVMDriveParams{

		timeout: timeout,
	}
}

// NewDeleteVMDriveParamsWithContext creates a new DeleteVMDriveParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteVMDriveParamsWithContext(ctx context.Context) *DeleteVMDriveParams {
	var ()
	return &DeleteVMDriveParams{

		Context: ctx,
	}
}

// NewDeleteVMDriveParamsWithHTTPClient creates a new DeleteVMDriveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteVMDriveParamsWithHTTPClient(client *http.Client) *DeleteVMDriveParams {
	var ()
	return &DeleteVMDriveParams{
		HTTPClient: client,
	}
}

/*DeleteVMDriveParams contains all the parameters to send to the API endpoint
for the delete VM drive operation typically these are written to a http.Request
*/
type DeleteVMDriveParams struct {

	/*DiskID
	  ID of VM Interface to use

	*/
	DiskID string
	/*VMID
	  ID of VM to return

	*/
	VMID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete VM drive params
func (o *DeleteVMDriveParams) WithTimeout(timeout time.Duration) *DeleteVMDriveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete VM drive params
func (o *DeleteVMDriveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete VM drive params
func (o *DeleteVMDriveParams) WithContext(ctx context.Context) *DeleteVMDriveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete VM drive params
func (o *DeleteVMDriveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete VM drive params
func (o *DeleteVMDriveParams) WithHTTPClient(client *http.Client) *DeleteVMDriveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete VM drive params
func (o *DeleteVMDriveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDiskID adds the diskID to the delete VM drive params
func (o *DeleteVMDriveParams) WithDiskID(diskID string) *DeleteVMDriveParams {
	o.SetDiskID(diskID)
	return o
}

// SetDiskID adds the diskId to the delete VM drive params
func (o *DeleteVMDriveParams) SetDiskID(diskID string) {
	o.DiskID = diskID
}

// WithVMID adds the vMID to the delete VM drive params
func (o *DeleteVMDriveParams) WithVMID(vMID string) *DeleteVMDriveParams {
	o.SetVMID(vMID)
	return o
}

// SetVMID adds the vmId to the delete VM drive params
func (o *DeleteVMDriveParams) SetVMID(vMID string) {
	o.VMID = vMID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteVMDriveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param diskID
	if err := r.SetPathParam("diskID", o.DiskID); err != nil {
		return err
	}

	// path param vmID
	if err := r.SetPathParam("vmID", o.VMID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
