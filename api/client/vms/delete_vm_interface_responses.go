// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/768bit/promethium/api/models"
)

// DeleteVMInterfaceReader is a Reader for the DeleteVMInterface structure.
type DeleteVMInterfaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVMInterfaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVMInterfaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVMInterfaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVMInterfaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteVMInterfaceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteVMInterfaceOK creates a DeleteVMInterfaceOK with default headers values
func NewDeleteVMInterfaceOK() *DeleteVMInterfaceOK {
	return &DeleteVMInterfaceOK{}
}

/*DeleteVMInterfaceOK handles this case with default header values.

successful operation
*/
type DeleteVMInterfaceOK struct {
	Payload *models.Item
}

func (o *DeleteVMInterfaceOK) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/interfaces/{interfaceID}][%d] deleteVmInterfaceOK  %+v", 200, o.Payload)
}

func (o *DeleteVMInterfaceOK) GetPayload() *models.Item {
	return o.Payload
}

func (o *DeleteVMInterfaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Item)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVMInterfaceBadRequest creates a DeleteVMInterfaceBadRequest with default headers values
func NewDeleteVMInterfaceBadRequest() *DeleteVMInterfaceBadRequest {
	return &DeleteVMInterfaceBadRequest{}
}

/*DeleteVMInterfaceBadRequest handles this case with default header values.

Invalid ID supplied
*/
type DeleteVMInterfaceBadRequest struct {
}

func (o *DeleteVMInterfaceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/interfaces/{interfaceID}][%d] deleteVmInterfaceBadRequest ", 400)
}

func (o *DeleteVMInterfaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVMInterfaceNotFound creates a DeleteVMInterfaceNotFound with default headers values
func NewDeleteVMInterfaceNotFound() *DeleteVMInterfaceNotFound {
	return &DeleteVMInterfaceNotFound{}
}

/*DeleteVMInterfaceNotFound handles this case with default header values.

VM not found
*/
type DeleteVMInterfaceNotFound struct {
}

func (o *DeleteVMInterfaceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/interfaces/{interfaceID}][%d] deleteVmInterfaceNotFound ", 404)
}

func (o *DeleteVMInterfaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVMInterfaceDefault creates a DeleteVMInterfaceDefault with default headers values
func NewDeleteVMInterfaceDefault(code int) *DeleteVMInterfaceDefault {
	return &DeleteVMInterfaceDefault{
		_statusCode: code,
	}
}

/*DeleteVMInterfaceDefault handles this case with default header values.

unexpected error
*/
type DeleteVMInterfaceDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete VM interface default response
func (o *DeleteVMInterfaceDefault) Code() int {
	return o._statusCode
}

func (o *DeleteVMInterfaceDefault) Error() string {
	return fmt.Sprintf("[DELETE /vms/{vmID}/interfaces/{interfaceID}][%d] deleteVMInterface default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVMInterfaceDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteVMInterfaceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
