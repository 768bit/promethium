// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetStorageStorageIDImagesHandlerFunc turns a function with the right signature into a get storage storage ID images handler
type GetStorageStorageIDImagesHandlerFunc func(GetStorageStorageIDImagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStorageStorageIDImagesHandlerFunc) Handle(params GetStorageStorageIDImagesParams) middleware.Responder {
	return fn(params)
}

// GetStorageStorageIDImagesHandler interface for that can handle valid get storage storage ID images params
type GetStorageStorageIDImagesHandler interface {
	Handle(GetStorageStorageIDImagesParams) middleware.Responder
}

// NewGetStorageStorageIDImages creates a new http.Handler for the get storage storage ID images operation
func NewGetStorageStorageIDImages(ctx *middleware.Context, handler GetStorageStorageIDImagesHandler) *GetStorageStorageIDImages {
	return &GetStorageStorageIDImages{Context: ctx, Handler: handler}
}

/*GetStorageStorageIDImages swagger:route GET /storage/{storageID}/images storage getStorageStorageIdImages

Get storage item

*/
type GetStorageStorageIDImages struct {
	Context *middleware.Context
	Handler GetStorageStorageIDImagesHandler
}

func (o *GetStorageStorageIDImages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetStorageStorageIDImagesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
