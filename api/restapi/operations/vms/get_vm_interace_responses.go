// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/768bit/promethium/api/models"
)

// GetVMInteraceOKCode is the HTTP code returned for type GetVMInteraceOK
const GetVMInteraceOKCode int = 200

/*GetVMInteraceOK successful operation

swagger:response getVmInteraceOK
*/
type GetVMInteraceOK struct {

	/*
	  In: Body
	*/
	Payload *models.MetaDataNetworkInterfaceConfig `json:"body,omitempty"`
}

// NewGetVMInteraceOK creates GetVMInteraceOK with default headers values
func NewGetVMInteraceOK() *GetVMInteraceOK {

	return &GetVMInteraceOK{}
}

// WithPayload adds the payload to the get Vm interace o k response
func (o *GetVMInteraceOK) WithPayload(payload *models.MetaDataNetworkInterfaceConfig) *GetVMInteraceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Vm interace o k response
func (o *GetVMInteraceOK) SetPayload(payload *models.MetaDataNetworkInterfaceConfig) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVMInteraceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVMInteraceBadRequestCode is the HTTP code returned for type GetVMInteraceBadRequest
const GetVMInteraceBadRequestCode int = 400

/*GetVMInteraceBadRequest Invalid ID supplied

swagger:response getVmInteraceBadRequest
*/
type GetVMInteraceBadRequest struct {
}

// NewGetVMInteraceBadRequest creates GetVMInteraceBadRequest with default headers values
func NewGetVMInteraceBadRequest() *GetVMInteraceBadRequest {

	return &GetVMInteraceBadRequest{}
}

// WriteResponse to the client
func (o *GetVMInteraceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GetVMInteraceNotFoundCode is the HTTP code returned for type GetVMInteraceNotFound
const GetVMInteraceNotFoundCode int = 404

/*GetVMInteraceNotFound VM not found

swagger:response getVmInteraceNotFound
*/
type GetVMInteraceNotFound struct {
}

// NewGetVMInteraceNotFound creates GetVMInteraceNotFound with default headers values
func NewGetVMInteraceNotFound() *GetVMInteraceNotFound {

	return &GetVMInteraceNotFound{}
}

// WriteResponse to the client
func (o *GetVMInteraceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*GetVMInteraceDefault unexpected error

swagger:response getVmInteraceDefault
*/
type GetVMInteraceDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetVMInteraceDefault creates GetVMInteraceDefault with default headers values
func NewGetVMInteraceDefault(code int) *GetVMInteraceDefault {
	if code <= 0 {
		code = 500
	}

	return &GetVMInteraceDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get VM interace default response
func (o *GetVMInteraceDefault) WithStatusCode(code int) *GetVMInteraceDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get VM interace default response
func (o *GetVMInteraceDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get VM interace default response
func (o *GetVMInteraceDefault) WithPayload(payload *models.Error) *GetVMInteraceDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get VM interace default response
func (o *GetVMInteraceDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVMInteraceDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
