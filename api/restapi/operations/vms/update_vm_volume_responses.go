// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/768bit/promethium/api/models"
)

// UpdateVMVolumeOKCode is the HTTP code returned for type UpdateVMVolumeOK
const UpdateVMVolumeOKCode int = 200

/*UpdateVMVolumeOK successful operation

swagger:response updateVmVolumeOK
*/
type UpdateVMVolumeOK struct {

	/*
	  In: Body
	*/
	Payload *models.VMVolume `json:"body,omitempty"`
}

// NewUpdateVMVolumeOK creates UpdateVMVolumeOK with default headers values
func NewUpdateVMVolumeOK() *UpdateVMVolumeOK {

	return &UpdateVMVolumeOK{}
}

// WithPayload adds the payload to the update Vm volume o k response
func (o *UpdateVMVolumeOK) WithPayload(payload *models.VMVolume) *UpdateVMVolumeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update Vm volume o k response
func (o *UpdateVMVolumeOK) SetPayload(payload *models.VMVolume) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateVMVolumeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateVMVolumeBadRequestCode is the HTTP code returned for type UpdateVMVolumeBadRequest
const UpdateVMVolumeBadRequestCode int = 400

/*UpdateVMVolumeBadRequest Invalid ID supplied

swagger:response updateVmVolumeBadRequest
*/
type UpdateVMVolumeBadRequest struct {
}

// NewUpdateVMVolumeBadRequest creates UpdateVMVolumeBadRequest with default headers values
func NewUpdateVMVolumeBadRequest() *UpdateVMVolumeBadRequest {

	return &UpdateVMVolumeBadRequest{}
}

// WriteResponse to the client
func (o *UpdateVMVolumeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// UpdateVMVolumeNotFoundCode is the HTTP code returned for type UpdateVMVolumeNotFound
const UpdateVMVolumeNotFoundCode int = 404

/*UpdateVMVolumeNotFound VM Interface not found

swagger:response updateVmVolumeNotFound
*/
type UpdateVMVolumeNotFound struct {
}

// NewUpdateVMVolumeNotFound creates UpdateVMVolumeNotFound with default headers values
func NewUpdateVMVolumeNotFound() *UpdateVMVolumeNotFound {

	return &UpdateVMVolumeNotFound{}
}

// WriteResponse to the client
func (o *UpdateVMVolumeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*UpdateVMVolumeDefault unexpected error

swagger:response updateVmVolumeDefault
*/
type UpdateVMVolumeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateVMVolumeDefault creates UpdateVMVolumeDefault with default headers values
func NewUpdateVMVolumeDefault(code int) *UpdateVMVolumeDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateVMVolumeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update VM volume default response
func (o *UpdateVMVolumeDefault) WithStatusCode(code int) *UpdateVMVolumeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update VM volume default response
func (o *UpdateVMVolumeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update VM volume default response
func (o *UpdateVMVolumeDefault) WithPayload(payload *models.Error) *UpdateVMVolumeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update VM volume default response
func (o *UpdateVMVolumeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateVMVolumeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
