// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/768bit/promethium/api/models"
)

// UpdateVMDiskOKCode is the HTTP code returned for type UpdateVMDiskOK
const UpdateVMDiskOKCode int = 200

/*UpdateVMDiskOK successful operation

swagger:response updateVmDiskOK
*/
type UpdateVMDiskOK struct {

	/*
	  In: Body
	*/
	Payload *models.UpdateVMDisk `json:"body,omitempty"`
}

// NewUpdateVMDiskOK creates UpdateVMDiskOK with default headers values
func NewUpdateVMDiskOK() *UpdateVMDiskOK {

	return &UpdateVMDiskOK{}
}

// WithPayload adds the payload to the update Vm disk o k response
func (o *UpdateVMDiskOK) WithPayload(payload *models.UpdateVMDisk) *UpdateVMDiskOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update Vm disk o k response
func (o *UpdateVMDiskOK) SetPayload(payload *models.UpdateVMDisk) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateVMDiskOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateVMDiskBadRequestCode is the HTTP code returned for type UpdateVMDiskBadRequest
const UpdateVMDiskBadRequestCode int = 400

/*UpdateVMDiskBadRequest Invalid ID supplied

swagger:response updateVmDiskBadRequest
*/
type UpdateVMDiskBadRequest struct {
}

// NewUpdateVMDiskBadRequest creates UpdateVMDiskBadRequest with default headers values
func NewUpdateVMDiskBadRequest() *UpdateVMDiskBadRequest {

	return &UpdateVMDiskBadRequest{}
}

// WriteResponse to the client
func (o *UpdateVMDiskBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// UpdateVMDiskNotFoundCode is the HTTP code returned for type UpdateVMDiskNotFound
const UpdateVMDiskNotFoundCode int = 404

/*UpdateVMDiskNotFound VM Interface not found

swagger:response updateVmDiskNotFound
*/
type UpdateVMDiskNotFound struct {
}

// NewUpdateVMDiskNotFound creates UpdateVMDiskNotFound with default headers values
func NewUpdateVMDiskNotFound() *UpdateVMDiskNotFound {

	return &UpdateVMDiskNotFound{}
}

// WriteResponse to the client
func (o *UpdateVMDiskNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*UpdateVMDiskDefault unexpected error

swagger:response updateVmDiskDefault
*/
type UpdateVMDiskDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateVMDiskDefault creates UpdateVMDiskDefault with default headers values
func NewUpdateVMDiskDefault(code int) *UpdateVMDiskDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateVMDiskDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update VM disk default response
func (o *UpdateVMDiskDefault) WithStatusCode(code int) *UpdateVMDiskDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update VM disk default response
func (o *UpdateVMDiskDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update VM disk default response
func (o *UpdateVMDiskDefault) WithPayload(payload *models.Error) *UpdateVMDiskDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update VM disk default response
func (o *UpdateVMDiskDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateVMDiskDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
