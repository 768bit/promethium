// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/768bit/promethium/api/models"
)

// DeleteVMVolumeOKCode is the HTTP code returned for type DeleteVMVolumeOK
const DeleteVMVolumeOKCode int = 200

/*DeleteVMVolumeOK successful operation

swagger:response deleteVmVolumeOK
*/
type DeleteVMVolumeOK struct {

	/*
	  In: Body
	*/
	Payload *models.Item `json:"body,omitempty"`
}

// NewDeleteVMVolumeOK creates DeleteVMVolumeOK with default headers values
func NewDeleteVMVolumeOK() *DeleteVMVolumeOK {

	return &DeleteVMVolumeOK{}
}

// WithPayload adds the payload to the delete Vm volume o k response
func (o *DeleteVMVolumeOK) WithPayload(payload *models.Item) *DeleteVMVolumeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete Vm volume o k response
func (o *DeleteVMVolumeOK) SetPayload(payload *models.Item) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVMVolumeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteVMVolumeBadRequestCode is the HTTP code returned for type DeleteVMVolumeBadRequest
const DeleteVMVolumeBadRequestCode int = 400

/*DeleteVMVolumeBadRequest Invalid ID supplied

swagger:response deleteVmVolumeBadRequest
*/
type DeleteVMVolumeBadRequest struct {
}

// NewDeleteVMVolumeBadRequest creates DeleteVMVolumeBadRequest with default headers values
func NewDeleteVMVolumeBadRequest() *DeleteVMVolumeBadRequest {

	return &DeleteVMVolumeBadRequest{}
}

// WriteResponse to the client
func (o *DeleteVMVolumeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// DeleteVMVolumeNotFoundCode is the HTTP code returned for type DeleteVMVolumeNotFound
const DeleteVMVolumeNotFoundCode int = 404

/*DeleteVMVolumeNotFound VM not found

swagger:response deleteVmVolumeNotFound
*/
type DeleteVMVolumeNotFound struct {
}

// NewDeleteVMVolumeNotFound creates DeleteVMVolumeNotFound with default headers values
func NewDeleteVMVolumeNotFound() *DeleteVMVolumeNotFound {

	return &DeleteVMVolumeNotFound{}
}

// WriteResponse to the client
func (o *DeleteVMVolumeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*DeleteVMVolumeDefault unexpected error

swagger:response deleteVmVolumeDefault
*/
type DeleteVMVolumeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteVMVolumeDefault creates DeleteVMVolumeDefault with default headers values
func NewDeleteVMVolumeDefault(code int) *DeleteVMVolumeDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteVMVolumeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete VM volume default response
func (o *DeleteVMVolumeDefault) WithStatusCode(code int) *DeleteVMVolumeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete VM volume default response
func (o *DeleteVMVolumeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete VM volume default response
func (o *DeleteVMVolumeDefault) WithPayload(payload *models.Error) *DeleteVMVolumeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete VM volume default response
func (o *DeleteVMVolumeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVMVolumeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
