// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetVMInterfaceListHandlerFunc turns a function with the right signature into a get VM interface list handler
type GetVMInterfaceListHandlerFunc func(GetVMInterfaceListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVMInterfaceListHandlerFunc) Handle(params GetVMInterfaceListParams) middleware.Responder {
	return fn(params)
}

// GetVMInterfaceListHandler interface for that can handle valid get VM interface list params
type GetVMInterfaceListHandler interface {
	Handle(GetVMInterfaceListParams) middleware.Responder
}

// NewGetVMInterfaceList creates a new http.Handler for the get VM interface list operation
func NewGetVMInterfaceList(ctx *middleware.Context, handler GetVMInterfaceListHandler) *GetVMInterfaceList {
	return &GetVMInterfaceList{Context: ctx, Handler: handler}
}

/*GetVMInterfaceList swagger:route GET /vms/{vmID}/interfaces vms getVmInterfaceList

Get a list of VM Network Interfaces

Returns a list of VM Network Itnerfaces

*/
type GetVMInterfaceList struct {
	Context *middleware.Context
	Handler GetVMInterfaceListHandler
}

func (o *GetVMInterfaceList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetVMInterfaceListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
