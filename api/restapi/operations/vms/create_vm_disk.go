// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateVMDiskHandlerFunc turns a function with the right signature into a create VM disk handler
type CreateVMDiskHandlerFunc func(CreateVMDiskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateVMDiskHandlerFunc) Handle(params CreateVMDiskParams) middleware.Responder {
	return fn(params)
}

// CreateVMDiskHandler interface for that can handle valid create VM disk params
type CreateVMDiskHandler interface {
	Handle(CreateVMDiskParams) middleware.Responder
}

// NewCreateVMDisk creates a new http.Handler for the create VM disk operation
func NewCreateVMDisk(ctx *middleware.Context, handler CreateVMDiskHandler) *CreateVMDisk {
	return &CreateVMDisk{Context: ctx, Handler: handler}
}

/*CreateVMDisk swagger:route POST /vms/{vmID}/disks vms createVmDisk

Create or attach a VM Disk

Create or attach a VM Disk

*/
type CreateVMDisk struct {
	Context *middleware.Context
	Handler CreateVMDiskHandler
}

func (o *CreateVMDisk) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateVMDiskParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
