// Code generated by go-swagger; DO NOT EDIT.

package vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/768bit/promethium/api/models"
)

// CreateVMDiskOKCode is the HTTP code returned for type CreateVMDiskOK
const CreateVMDiskOKCode int = 200

/*CreateVMDiskOK successful operation

swagger:response createVmDiskOK
*/
type CreateVMDiskOK struct {

	/*
	  In: Body
	*/
	Payload *models.VMDisk `json:"body,omitempty"`
}

// NewCreateVMDiskOK creates CreateVMDiskOK with default headers values
func NewCreateVMDiskOK() *CreateVMDiskOK {

	return &CreateVMDiskOK{}
}

// WithPayload adds the payload to the create Vm disk o k response
func (o *CreateVMDiskOK) WithPayload(payload *models.VMDisk) *CreateVMDiskOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Vm disk o k response
func (o *CreateVMDiskOK) SetPayload(payload *models.VMDisk) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateVMDiskOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateVMDiskBadRequestCode is the HTTP code returned for type CreateVMDiskBadRequest
const CreateVMDiskBadRequestCode int = 400

/*CreateVMDiskBadRequest Invalid ID supplied

swagger:response createVmDiskBadRequest
*/
type CreateVMDiskBadRequest struct {
}

// NewCreateVMDiskBadRequest creates CreateVMDiskBadRequest with default headers values
func NewCreateVMDiskBadRequest() *CreateVMDiskBadRequest {

	return &CreateVMDiskBadRequest{}
}

// WriteResponse to the client
func (o *CreateVMDiskBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// CreateVMDiskNotFoundCode is the HTTP code returned for type CreateVMDiskNotFound
const CreateVMDiskNotFoundCode int = 404

/*CreateVMDiskNotFound VM not found

swagger:response createVmDiskNotFound
*/
type CreateVMDiskNotFound struct {
}

// NewCreateVMDiskNotFound creates CreateVMDiskNotFound with default headers values
func NewCreateVMDiskNotFound() *CreateVMDiskNotFound {

	return &CreateVMDiskNotFound{}
}

// WriteResponse to the client
func (o *CreateVMDiskNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*CreateVMDiskDefault unexpected error

swagger:response createVmDiskDefault
*/
type CreateVMDiskDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateVMDiskDefault creates CreateVMDiskDefault with default headers values
func NewCreateVMDiskDefault(code int) *CreateVMDiskDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateVMDiskDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create VM disk default response
func (o *CreateVMDiskDefault) WithStatusCode(code int) *CreateVMDiskDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create VM disk default response
func (o *CreateVMDiskDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create VM disk default response
func (o *CreateVMDiskDefault) WithPayload(payload *models.Error) *CreateVMDiskDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create VM disk default response
func (o *CreateVMDiskDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateVMDiskDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
