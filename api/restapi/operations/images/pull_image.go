// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PullImageHandlerFunc turns a function with the right signature into a pull image handler
type PullImageHandlerFunc func(PullImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PullImageHandlerFunc) Handle(params PullImageParams) middleware.Responder {
	return fn(params)
}

// PullImageHandler interface for that can handle valid pull image params
type PullImageHandler interface {
	Handle(PullImageParams) middleware.Responder
}

// NewPullImage creates a new http.Handler for the pull image operation
func NewPullImage(ctx *middleware.Context, handler PullImageHandler) *PullImage {
	return &PullImage{Context: ctx, Handler: handler}
}

/*PullImage swagger:route POST /images/pull images pullImage

Pull an image to the server

Pull an image to the server

*/
type PullImage struct {
	Context *middleware.Context
	Handler PullImageHandler
}

func (o *PullImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPullImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
