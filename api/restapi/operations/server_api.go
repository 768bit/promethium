// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/768bit/promethium/api/restapi/operations/images"
	"github.com/768bit/promethium/api/restapi/operations/networking"
	"github.com/768bit/promethium/api/restapi/operations/storage"
	"github.com/768bit/promethium/api/restapi/operations/vms"
)

// NewServerAPI creates a new Server instance
func NewServerAPI(spec *loads.Document) *ServerAPI {
	return &ServerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		StorageGetStorageStorageIDDisksHandler: storage.GetStorageStorageIDDisksHandlerFunc(func(params storage.GetStorageStorageIDDisksParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetStorageStorageIDDisks has not yet been implemented")
		}),
		StorageGetStorageStorageIDImagesHandler: storage.GetStorageStorageIDImagesHandlerFunc(func(params storage.GetStorageStorageIDImagesParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetStorageStorageIDImages has not yet been implemented")
		}),
		StorageGetStorageStorageIDKernelsHandler: storage.GetStorageStorageIDKernelsHandlerFunc(func(params storage.GetStorageStorageIDKernelsParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetStorageStorageIDKernels has not yet been implemented")
		}),
		VmsCreateImageHandler: vms.CreateImageHandlerFunc(func(params vms.CreateImageParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsCreateImage has not yet been implemented")
		}),
		NetworkingCreateNetworkHandler: networking.CreateNetworkHandlerFunc(func(params networking.CreateNetworkParams) middleware.Responder {
			return middleware.NotImplemented("operation NetworkingCreateNetwork has not yet been implemented")
		}),
		StorageCreateStorageHandler: storage.CreateStorageHandlerFunc(func(params storage.CreateStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageCreateStorage has not yet been implemented")
		}),
		VmsCreateVMHandler: vms.CreateVMHandlerFunc(func(params vms.CreateVMParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsCreateVM has not yet been implemented")
		}),
		VmsCreateVMDiskHandler: vms.CreateVMDiskHandlerFunc(func(params vms.CreateVMDiskParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsCreateVMDisk has not yet been implemented")
		}),
		VmsCreateVMInterfaceHandler: vms.CreateVMInterfaceHandlerFunc(func(params vms.CreateVMInterfaceParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsCreateVMInterface has not yet been implemented")
		}),
		VmsCreateVMVolumeHandler: vms.CreateVMVolumeHandlerFunc(func(params vms.CreateVMVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsCreateVMVolume has not yet been implemented")
		}),
		VmsDeleteVMHandler: vms.DeleteVMHandlerFunc(func(params vms.DeleteVMParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsDeleteVM has not yet been implemented")
		}),
		VmsDeleteVMDriveHandler: vms.DeleteVMDriveHandlerFunc(func(params vms.DeleteVMDriveParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsDeleteVMDrive has not yet been implemented")
		}),
		VmsDeleteVMInterfaceHandler: vms.DeleteVMInterfaceHandlerFunc(func(params vms.DeleteVMInterfaceParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsDeleteVMInterface has not yet been implemented")
		}),
		VmsDeleteVMVolumeHandler: vms.DeleteVMVolumeHandlerFunc(func(params vms.DeleteVMVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsDeleteVMVolume has not yet been implemented")
		}),
		NetworkingDestroyNetworkHandler: networking.DestroyNetworkHandlerFunc(func(params networking.DestroyNetworkParams) middleware.Responder {
			return middleware.NotImplemented("operation NetworkingDestroyNetwork has not yet been implemented")
		}),
		StorageDestroyStorageHandler: storage.DestroyStorageHandlerFunc(func(params storage.DestroyStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageDestroyStorage has not yet been implemented")
		}),
		ImagesGetImagesListHandler: images.GetImagesListHandlerFunc(func(params images.GetImagesListParams) middleware.Responder {
			return middleware.NotImplemented("operation ImagesGetImagesList has not yet been implemented")
		}),
		NetworkingGetNetworkHandler: networking.GetNetworkHandlerFunc(func(params networking.GetNetworkParams) middleware.Responder {
			return middleware.NotImplemented("operation NetworkingGetNetwork has not yet been implemented")
		}),
		NetworkingGetNetworkInterfacesHandler: networking.GetNetworkInterfacesHandlerFunc(func(params networking.GetNetworkInterfacesParams) middleware.Responder {
			return middleware.NotImplemented("operation NetworkingGetNetworkInterfaces has not yet been implemented")
		}),
		NetworkingGetNetworkListHandler: networking.GetNetworkListHandlerFunc(func(params networking.GetNetworkListParams) middleware.Responder {
			return middleware.NotImplemented("operation NetworkingGetNetworkList has not yet been implemented")
		}),
		NetworkingGetPhysicalInterfacesHandler: networking.GetPhysicalInterfacesHandlerFunc(func(params networking.GetPhysicalInterfacesParams) middleware.Responder {
			return middleware.NotImplemented("operation NetworkingGetPhysicalInterfaces has not yet been implemented")
		}),
		StorageGetStorageHandler: storage.GetStorageHandlerFunc(func(params storage.GetStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetStorage has not yet been implemented")
		}),
		StorageGetStorageListHandler: storage.GetStorageListHandlerFunc(func(params storage.GetStorageListParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageGetStorageList has not yet been implemented")
		}),
		VmsGetVMHandler: vms.GetVMHandlerFunc(func(params vms.GetVMParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVM has not yet been implemented")
		}),
		VmsGetVMDiskHandler: vms.GetVMDiskHandlerFunc(func(params vms.GetVMDiskParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVMDisk has not yet been implemented")
		}),
		VmsGetVMDiskListHandler: vms.GetVMDiskListHandlerFunc(func(params vms.GetVMDiskListParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVMDiskList has not yet been implemented")
		}),
		VmsGetVMInteraceHandler: vms.GetVMInteraceHandlerFunc(func(params vms.GetVMInteraceParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVMInterace has not yet been implemented")
		}),
		VmsGetVMInterfaceListHandler: vms.GetVMInterfaceListHandlerFunc(func(params vms.GetVMInterfaceListParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVMInterfaceList has not yet been implemented")
		}),
		VmsGetVMListHandler: vms.GetVMListHandlerFunc(func(params vms.GetVMListParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVMList has not yet been implemented")
		}),
		VmsGetVMVolumeHandler: vms.GetVMVolumeHandlerFunc(func(params vms.GetVMVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVMVolume has not yet been implemented")
		}),
		VmsGetVMVolumeListHandler: vms.GetVMVolumeListHandlerFunc(func(params vms.GetVMVolumeListParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsGetVMVolumeList has not yet been implemented")
		}),
		VmsStartVMHandler: vms.StartVMHandlerFunc(func(params vms.StartVMParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsStartVM has not yet been implemented")
		}),
		VmsStopVMHandler: vms.StopVMHandlerFunc(func(params vms.StopVMParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsStopVM has not yet been implemented")
		}),
		NetworkingUpdateNetworkHandler: networking.UpdateNetworkHandlerFunc(func(params networking.UpdateNetworkParams) middleware.Responder {
			return middleware.NotImplemented("operation NetworkingUpdateNetwork has not yet been implemented")
		}),
		StorageUpdateStorageHandler: storage.UpdateStorageHandlerFunc(func(params storage.UpdateStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation StorageUpdateStorage has not yet been implemented")
		}),
		VmsUpdateVMHandler: vms.UpdateVMHandlerFunc(func(params vms.UpdateVMParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsUpdateVM has not yet been implemented")
		}),
		VmsUpdateVMDiskHandler: vms.UpdateVMDiskHandlerFunc(func(params vms.UpdateVMDiskParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsUpdateVMDisk has not yet been implemented")
		}),
		VmsUpdateVMInterfaceHandler: vms.UpdateVMInterfaceHandlerFunc(func(params vms.UpdateVMInterfaceParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsUpdateVMInterface has not yet been implemented")
		}),
		VmsUpdateVMVolumeHandler: vms.UpdateVMVolumeHandlerFunc(func(params vms.UpdateVMVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation VmsUpdateVMVolume has not yet been implemented")
		}),
	}
}

/*ServerAPI API for Promethium Daemon */
type ServerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// StorageGetStorageStorageIDDisksHandler sets the operation handler for the get storage storage ID disks operation
	StorageGetStorageStorageIDDisksHandler storage.GetStorageStorageIDDisksHandler
	// StorageGetStorageStorageIDImagesHandler sets the operation handler for the get storage storage ID images operation
	StorageGetStorageStorageIDImagesHandler storage.GetStorageStorageIDImagesHandler
	// StorageGetStorageStorageIDKernelsHandler sets the operation handler for the get storage storage ID kernels operation
	StorageGetStorageStorageIDKernelsHandler storage.GetStorageStorageIDKernelsHandler
	// VmsCreateImageHandler sets the operation handler for the create image operation
	VmsCreateImageHandler vms.CreateImageHandler
	// NetworkingCreateNetworkHandler sets the operation handler for the create network operation
	NetworkingCreateNetworkHandler networking.CreateNetworkHandler
	// StorageCreateStorageHandler sets the operation handler for the create storage operation
	StorageCreateStorageHandler storage.CreateStorageHandler
	// VmsCreateVMHandler sets the operation handler for the create VM operation
	VmsCreateVMHandler vms.CreateVMHandler
	// VmsCreateVMDiskHandler sets the operation handler for the create VM disk operation
	VmsCreateVMDiskHandler vms.CreateVMDiskHandler
	// VmsCreateVMInterfaceHandler sets the operation handler for the create VM interface operation
	VmsCreateVMInterfaceHandler vms.CreateVMInterfaceHandler
	// VmsCreateVMVolumeHandler sets the operation handler for the create VM volume operation
	VmsCreateVMVolumeHandler vms.CreateVMVolumeHandler
	// VmsDeleteVMHandler sets the operation handler for the delete VM operation
	VmsDeleteVMHandler vms.DeleteVMHandler
	// VmsDeleteVMDriveHandler sets the operation handler for the delete VM drive operation
	VmsDeleteVMDriveHandler vms.DeleteVMDriveHandler
	// VmsDeleteVMInterfaceHandler sets the operation handler for the delete VM interface operation
	VmsDeleteVMInterfaceHandler vms.DeleteVMInterfaceHandler
	// VmsDeleteVMVolumeHandler sets the operation handler for the delete VM volume operation
	VmsDeleteVMVolumeHandler vms.DeleteVMVolumeHandler
	// NetworkingDestroyNetworkHandler sets the operation handler for the destroy network operation
	NetworkingDestroyNetworkHandler networking.DestroyNetworkHandler
	// StorageDestroyStorageHandler sets the operation handler for the destroy storage operation
	StorageDestroyStorageHandler storage.DestroyStorageHandler
	// ImagesGetImagesListHandler sets the operation handler for the get images list operation
	ImagesGetImagesListHandler images.GetImagesListHandler
	// NetworkingGetNetworkHandler sets the operation handler for the get network operation
	NetworkingGetNetworkHandler networking.GetNetworkHandler
	// NetworkingGetNetworkInterfacesHandler sets the operation handler for the get network interfaces operation
	NetworkingGetNetworkInterfacesHandler networking.GetNetworkInterfacesHandler
	// NetworkingGetNetworkListHandler sets the operation handler for the get network list operation
	NetworkingGetNetworkListHandler networking.GetNetworkListHandler
	// NetworkingGetPhysicalInterfacesHandler sets the operation handler for the get physical interfaces operation
	NetworkingGetPhysicalInterfacesHandler networking.GetPhysicalInterfacesHandler
	// StorageGetStorageHandler sets the operation handler for the get storage operation
	StorageGetStorageHandler storage.GetStorageHandler
	// StorageGetStorageListHandler sets the operation handler for the get storage list operation
	StorageGetStorageListHandler storage.GetStorageListHandler
	// VmsGetVMHandler sets the operation handler for the get VM operation
	VmsGetVMHandler vms.GetVMHandler
	// VmsGetVMDiskHandler sets the operation handler for the get VM disk operation
	VmsGetVMDiskHandler vms.GetVMDiskHandler
	// VmsGetVMDiskListHandler sets the operation handler for the get VM disk list operation
	VmsGetVMDiskListHandler vms.GetVMDiskListHandler
	// VmsGetVMInteraceHandler sets the operation handler for the get VM interace operation
	VmsGetVMInteraceHandler vms.GetVMInteraceHandler
	// VmsGetVMInterfaceListHandler sets the operation handler for the get VM interface list operation
	VmsGetVMInterfaceListHandler vms.GetVMInterfaceListHandler
	// VmsGetVMListHandler sets the operation handler for the get VM list operation
	VmsGetVMListHandler vms.GetVMListHandler
	// VmsGetVMVolumeHandler sets the operation handler for the get VM volume operation
	VmsGetVMVolumeHandler vms.GetVMVolumeHandler
	// VmsGetVMVolumeListHandler sets the operation handler for the get VM volume list operation
	VmsGetVMVolumeListHandler vms.GetVMVolumeListHandler
	// VmsStartVMHandler sets the operation handler for the start VM operation
	VmsStartVMHandler vms.StartVMHandler
	// VmsStopVMHandler sets the operation handler for the stop VM operation
	VmsStopVMHandler vms.StopVMHandler
	// NetworkingUpdateNetworkHandler sets the operation handler for the update network operation
	NetworkingUpdateNetworkHandler networking.UpdateNetworkHandler
	// StorageUpdateStorageHandler sets the operation handler for the update storage operation
	StorageUpdateStorageHandler storage.UpdateStorageHandler
	// VmsUpdateVMHandler sets the operation handler for the update VM operation
	VmsUpdateVMHandler vms.UpdateVMHandler
	// VmsUpdateVMDiskHandler sets the operation handler for the update VM disk operation
	VmsUpdateVMDiskHandler vms.UpdateVMDiskHandler
	// VmsUpdateVMInterfaceHandler sets the operation handler for the update VM interface operation
	VmsUpdateVMInterfaceHandler vms.UpdateVMInterfaceHandler
	// VmsUpdateVMVolumeHandler sets the operation handler for the update VM volume operation
	VmsUpdateVMVolumeHandler vms.UpdateVMVolumeHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ServerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ServerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ServerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ServerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ServerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ServerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ServerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ServerAPI
func (o *ServerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.StorageGetStorageStorageIDDisksHandler == nil {
		unregistered = append(unregistered, "storage.GetStorageStorageIDDisksHandler")
	}

	if o.StorageGetStorageStorageIDImagesHandler == nil {
		unregistered = append(unregistered, "storage.GetStorageStorageIDImagesHandler")
	}

	if o.StorageGetStorageStorageIDKernelsHandler == nil {
		unregistered = append(unregistered, "storage.GetStorageStorageIDKernelsHandler")
	}

	if o.VmsCreateImageHandler == nil {
		unregistered = append(unregistered, "vms.CreateImageHandler")
	}

	if o.NetworkingCreateNetworkHandler == nil {
		unregistered = append(unregistered, "networking.CreateNetworkHandler")
	}

	if o.StorageCreateStorageHandler == nil {
		unregistered = append(unregistered, "storage.CreateStorageHandler")
	}

	if o.VmsCreateVMHandler == nil {
		unregistered = append(unregistered, "vms.CreateVMHandler")
	}

	if o.VmsCreateVMDiskHandler == nil {
		unregistered = append(unregistered, "vms.CreateVMDiskHandler")
	}

	if o.VmsCreateVMInterfaceHandler == nil {
		unregistered = append(unregistered, "vms.CreateVMInterfaceHandler")
	}

	if o.VmsCreateVMVolumeHandler == nil {
		unregistered = append(unregistered, "vms.CreateVMVolumeHandler")
	}

	if o.VmsDeleteVMHandler == nil {
		unregistered = append(unregistered, "vms.DeleteVMHandler")
	}

	if o.VmsDeleteVMDriveHandler == nil {
		unregistered = append(unregistered, "vms.DeleteVMDriveHandler")
	}

	if o.VmsDeleteVMInterfaceHandler == nil {
		unregistered = append(unregistered, "vms.DeleteVMInterfaceHandler")
	}

	if o.VmsDeleteVMVolumeHandler == nil {
		unregistered = append(unregistered, "vms.DeleteVMVolumeHandler")
	}

	if o.NetworkingDestroyNetworkHandler == nil {
		unregistered = append(unregistered, "networking.DestroyNetworkHandler")
	}

	if o.StorageDestroyStorageHandler == nil {
		unregistered = append(unregistered, "storage.DestroyStorageHandler")
	}

	if o.ImagesGetImagesListHandler == nil {
		unregistered = append(unregistered, "images.GetImagesListHandler")
	}

	if o.NetworkingGetNetworkHandler == nil {
		unregistered = append(unregistered, "networking.GetNetworkHandler")
	}

	if o.NetworkingGetNetworkInterfacesHandler == nil {
		unregistered = append(unregistered, "networking.GetNetworkInterfacesHandler")
	}

	if o.NetworkingGetNetworkListHandler == nil {
		unregistered = append(unregistered, "networking.GetNetworkListHandler")
	}

	if o.NetworkingGetPhysicalInterfacesHandler == nil {
		unregistered = append(unregistered, "networking.GetPhysicalInterfacesHandler")
	}

	if o.StorageGetStorageHandler == nil {
		unregistered = append(unregistered, "storage.GetStorageHandler")
	}

	if o.StorageGetStorageListHandler == nil {
		unregistered = append(unregistered, "storage.GetStorageListHandler")
	}

	if o.VmsGetVMHandler == nil {
		unregistered = append(unregistered, "vms.GetVMHandler")
	}

	if o.VmsGetVMDiskHandler == nil {
		unregistered = append(unregistered, "vms.GetVMDiskHandler")
	}

	if o.VmsGetVMDiskListHandler == nil {
		unregistered = append(unregistered, "vms.GetVMDiskListHandler")
	}

	if o.VmsGetVMInteraceHandler == nil {
		unregistered = append(unregistered, "vms.GetVMInteraceHandler")
	}

	if o.VmsGetVMInterfaceListHandler == nil {
		unregistered = append(unregistered, "vms.GetVMInterfaceListHandler")
	}

	if o.VmsGetVMListHandler == nil {
		unregistered = append(unregistered, "vms.GetVMListHandler")
	}

	if o.VmsGetVMVolumeHandler == nil {
		unregistered = append(unregistered, "vms.GetVMVolumeHandler")
	}

	if o.VmsGetVMVolumeListHandler == nil {
		unregistered = append(unregistered, "vms.GetVMVolumeListHandler")
	}

	if o.VmsStartVMHandler == nil {
		unregistered = append(unregistered, "vms.StartVMHandler")
	}

	if o.VmsStopVMHandler == nil {
		unregistered = append(unregistered, "vms.StopVMHandler")
	}

	if o.NetworkingUpdateNetworkHandler == nil {
		unregistered = append(unregistered, "networking.UpdateNetworkHandler")
	}

	if o.StorageUpdateStorageHandler == nil {
		unregistered = append(unregistered, "storage.UpdateStorageHandler")
	}

	if o.VmsUpdateVMHandler == nil {
		unregistered = append(unregistered, "vms.UpdateVMHandler")
	}

	if o.VmsUpdateVMDiskHandler == nil {
		unregistered = append(unregistered, "vms.UpdateVMDiskHandler")
	}

	if o.VmsUpdateVMInterfaceHandler == nil {
		unregistered = append(unregistered, "vms.UpdateVMInterfaceHandler")
	}

	if o.VmsUpdateVMVolumeHandler == nil {
		unregistered = append(unregistered, "vms.UpdateVMVolumeHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ServerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ServerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ServerAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *ServerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ServerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ServerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the server API
func (o *ServerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ServerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/{storageID}/disks"] = storage.NewGetStorageStorageIDDisks(o.context, o.StorageGetStorageStorageIDDisksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/{storageID}/images"] = storage.NewGetStorageStorageIDImages(o.context, o.StorageGetStorageStorageIDImagesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/{storageID}/kernels"] = storage.NewGetStorageStorageIDKernels(o.context, o.StorageGetStorageStorageIDKernelsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/images"] = vms.NewCreateImage(o.context, o.VmsCreateImageHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networking"] = networking.NewCreateNetwork(o.context, o.NetworkingCreateNetworkHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/storage"] = storage.NewCreateStorage(o.context, o.StorageCreateStorageHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vms"] = vms.NewCreateVM(o.context, o.VmsCreateVMHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vms/{vmID}/disks"] = vms.NewCreateVMDisk(o.context, o.VmsCreateVMDiskHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vms/{vmID}/interfaces"] = vms.NewCreateVMInterface(o.context, o.VmsCreateVMInterfaceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vms/{vmID}/volumes"] = vms.NewCreateVMVolume(o.context, o.VmsCreateVMVolumeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vms/{vmID}"] = vms.NewDeleteVM(o.context, o.VmsDeleteVMHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vms/{vmID}/disks/{diskID}"] = vms.NewDeleteVMDrive(o.context, o.VmsDeleteVMDriveHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vms/{vmID}/interfaces/{interfaceID}"] = vms.NewDeleteVMInterface(o.context, o.VmsDeleteVMInterfaceHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vms/{vmID}/volumes/{volumeID}"] = vms.NewDeleteVMVolume(o.context, o.VmsDeleteVMVolumeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/networking/{networkID}"] = networking.NewDestroyNetwork(o.context, o.NetworkingDestroyNetworkHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/storage/{storageID}"] = storage.NewDestroyStorage(o.context, o.StorageDestroyStorageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images"] = images.NewGetImagesList(o.context, o.ImagesGetImagesListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networking/{networkID}"] = networking.NewGetNetwork(o.context, o.NetworkingGetNetworkHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networking/{networkID}/interfaces"] = networking.NewGetNetworkInterfaces(o.context, o.NetworkingGetNetworkInterfacesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networking"] = networking.NewGetNetworkList(o.context, o.NetworkingGetNetworkListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networking/physicalInterfaces"] = networking.NewGetPhysicalInterfaces(o.context, o.NetworkingGetPhysicalInterfacesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage/{storageID}"] = storage.NewGetStorage(o.context, o.StorageGetStorageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/storage"] = storage.NewGetStorageList(o.context, o.StorageGetStorageListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}"] = vms.NewGetVM(o.context, o.VmsGetVMHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/disks/{diskID}"] = vms.NewGetVMDisk(o.context, o.VmsGetVMDiskHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/disks"] = vms.NewGetVMDiskList(o.context, o.VmsGetVMDiskListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/interfaces/{interfaceID}"] = vms.NewGetVMInterace(o.context, o.VmsGetVMInteraceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/interfaces"] = vms.NewGetVMInterfaceList(o.context, o.VmsGetVMInterfaceListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms"] = vms.NewGetVMList(o.context, o.VmsGetVMListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/volumes/{volumeID}"] = vms.NewGetVMVolume(o.context, o.VmsGetVMVolumeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/volumes"] = vms.NewGetVMVolumeList(o.context, o.VmsGetVMVolumeListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/start"] = vms.NewStartVM(o.context, o.VmsStartVMHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vms/{vmID}/stop"] = vms.NewStopVM(o.context, o.VmsStopVMHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/networking/{networkID}"] = networking.NewUpdateNetwork(o.context, o.NetworkingUpdateNetworkHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/storage/{storageID}"] = storage.NewUpdateStorage(o.context, o.StorageUpdateStorageHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vms/{vmID}"] = vms.NewUpdateVM(o.context, o.VmsUpdateVMHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vms/{vmID}/disks/{diskID}"] = vms.NewUpdateVMDisk(o.context, o.VmsUpdateVMDiskHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vms/{vmID}/interfaces/{interfaceID}"] = vms.NewUpdateVMInterface(o.context, o.VmsUpdateVMInterfaceHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vms/{vmID}/volumes/{volumeID}"] = vms.NewUpdateVMVolume(o.context, o.VmsUpdateVMVolumeHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ServerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ServerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ServerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ServerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
