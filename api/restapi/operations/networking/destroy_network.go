// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DestroyNetworkHandlerFunc turns a function with the right signature into a destroy network handler
type DestroyNetworkHandlerFunc func(DestroyNetworkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DestroyNetworkHandlerFunc) Handle(params DestroyNetworkParams) middleware.Responder {
	return fn(params)
}

// DestroyNetworkHandler interface for that can handle valid destroy network params
type DestroyNetworkHandler interface {
	Handle(DestroyNetworkParams) middleware.Responder
}

// NewDestroyNetwork creates a new http.Handler for the destroy network operation
func NewDestroyNetwork(ctx *middleware.Context, handler DestroyNetworkHandler) *DestroyNetwork {
	return &DestroyNetwork{Context: ctx, Handler: handler}
}

/*DestroyNetwork swagger:route DELETE /networking/{networkID} networking destroyNetwork

Get a network (bridge)

*/
type DestroyNetwork struct {
	Context *middleware.Context
	Handler DestroyNetworkHandler
}

func (o *DestroyNetwork) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDestroyNetworkParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
