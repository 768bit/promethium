// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for Promethium Daemon",
    "title": "Promethium Daemon API",
    "version": "1.0.0"
  },
  "paths": {
    "/images": {
      "get": {
        "description": "Returns a list of Images",
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Get a list of Images",
        "operationId": "getImagesList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Images",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create a new Image",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create a new Image",
        "operationId": "createImage",
        "parameters": [
          {
            "description": "Create new Image",
            "name": "imageConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/networking": {
      "get": {
        "description": "Get all networks",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getNetworkList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create new network",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "createNetwork",
        "parameters": [
          {
            "description": "Create new Network (bridge)",
            "name": "netConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          }
        }
      }
    },
    "/networking/physicalInterfaces": {
      "get": {
        "description": "Get all physical interfaces",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getPhysicalInterfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInterface"
              }
            }
          }
        }
      }
    },
    "/networking/{networkID}": {
      "get": {
        "description": "Get a network (bridge)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "networkID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          }
        }
      },
      "put": {
        "description": "Update network",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "updateNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "networkID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "netConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      },
      "delete": {
        "description": "Get a network (bridge)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "destroyNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "ID of Network to delete",
            "name": "networkID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          }
        }
      }
    },
    "/networking/{networkID}/interfaces": {
      "get": {
        "description": "Get a network (bridge) interfaces",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getNetworkInterfaces",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "networkID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkInterface"
              }
            }
          }
        }
      }
    },
    "/storage": {
      "get": {
        "description": "Get all storage",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "getStorageList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Storage"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create new storage",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "createStorage",
        "parameters": [
          {
            "description": "Create new VM instance",
            "name": "storageConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          }
        }
      }
    },
    "/storage/{storageID}": {
      "get": {
        "description": "Get storage item",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "getStorage",
        "parameters": [
          {
            "type": "string",
            "description": "ID of Storage to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      },
      "put": {
        "description": "Update storage item",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "updateStorage",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "storageConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      },
      "delete": {
        "description": "Remove storage item",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "destroyStorage",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      }
    },
    "/storage/{storageID}/disks": {
      "get": {
        "description": "Get storage item",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageDisk"
              }
            }
          }
        }
      }
    },
    "/storage/{storageID}/images": {
      "get": {
        "description": "Get storage item",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageImage"
              }
            }
          }
        }
      }
    },
    "/storage/{storageID}/kernels": {
      "get": {
        "description": "Get storage item",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageKernel"
              }
            }
          }
        }
      }
    },
    "/vms": {
      "get": {
        "description": "Returns a list of VMs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VMs",
        "operationId": "getVMList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of VMs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VMListItem"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create an instance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create a VM instance",
        "operationId": "createVM",
        "parameters": [
          {
            "description": "Create new VM instance",
            "name": "vmConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}": {
      "get": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "getVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      },
      "put": {
        "description": "Update an instance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM instance",
        "operationId": "updateVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "Pet to add to the store",
            "name": "vmConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      },
      "delete": {
        "description": "Destroy an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Destroy a VM instance",
        "operationId": "deleteVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}/disks": {
      "get": {
        "description": "Returns a list of VM Attached Disks",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VM Attached Disks",
        "operationId": "getVMDiskList",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Disks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VMDisk"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create or attach a VM Disk",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create or attach a VM Disk",
        "operationId": "createVMDisk",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "vmDiskConfid",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVMDisk"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMDisk"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/disks/{diskID}": {
      "get": {
        "description": "Returns an isntance of VM Disk",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM Disk",
        "operationId": "getVMDisk",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Disk to use",
            "name": "diskID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMDisk"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM or Disk not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Update an instance of VM interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM Interface instance",
        "operationId": "updateVMDisk",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Disk to use",
            "name": "diskID",
            "in": "path",
            "required": true
          },
          {
            "description": "Pet to add to the store",
            "name": "vmDiskConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVMDisk"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateVMDisk"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM Interface not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "deleteVMDrive",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "diskID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/interfaces": {
      "get": {
        "description": "Returns a list of VM Network Itnerfaces",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VM Network Interfaces",
        "operationId": "getVMInterfaceList",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of VM Network Interfaces",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create a new VM Network Itnerface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create a new VM Network Itnerface",
        "operationId": "createVMInterface",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "interfaceConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVMInterface"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/interfaces/{interfaceID}": {
      "get": {
        "description": "Returns an instance of VM Network Interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM Network Interface",
        "operationId": "getVMInterace",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "interfaceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Update an instance of VM Network Interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM Network Interface instance",
        "operationId": "updateVMInterface",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "interfaceID",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated VM Interface Config",
            "name": "vmInterfaceConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVMInterface"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM Interface not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Destroy a VM Network Interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Destroy a VM Network Interface",
        "operationId": "deleteVMInterface",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "interfaceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/start": {
      "get": {
        "description": "Starts an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Start a VM instance",
        "operationId": "startVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}/stop": {
      "get": {
        "description": "Stops an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Stop a VM instance",
        "operationId": "stopVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}/volumes": {
      "get": {
        "description": "Returns a list of VM Volumes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VM Volumes",
        "operationId": "getVMVolumeList",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of VM Volumes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VMVolume"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create or attach a VM Volume",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create or attach a VM Volume",
        "operationId": "createVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "VM Volume Config",
            "name": "volumeConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVMVolume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMVolume"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/volumes/{volumeID}": {
      "get": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "getVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Volume to use",
            "name": "volumeID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMVolume"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Update an instance of VM interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM Interface instance",
        "operationId": "updateVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Volume to use",
            "name": "volumeID",
            "in": "path",
            "required": true
          },
          {
            "description": "Pet to add to the store",
            "name": "vmInterfaceConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVMVolume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMVolume"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM Interface not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "deleteVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "volumeID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Image": {
      "type": "object",
      "properties": {
        "Architecture": {
          "type": "string",
          "enum": [
            "x86_64",
            "aarch64"
          ]
        },
        "BootParams": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "type": "string"
        },
        "ImageHash": {
          "type": "string"
        },
        "KernelHash": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        },
        "Source": {
          "type": "string",
          "enum": [
            "promethium",
            "docker",
            "tar",
            "raw",
            "qcow2",
            "capstan"
          ]
        },
        "SourceURI": {
          "type": "string"
        },
        "Type": {
          "type": "string",
          "enum": [
            "standard",
            "osv",
            "qemu"
          ]
        },
        "Version": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Image"
      }
    },
    "MetaDataNetworkBondsConfig": {
      "type": "object",
      "properties": {
        "ad-select": {
          "type": "string",
          "enum": [
            "stable",
            "bandwidth",
            "count"
          ]
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "all-slaves-active": {
          "type": "boolean"
        },
        "arp-all-targets": {
          "type": "string",
          "enum": [
            "any",
            "all"
          ]
        },
        "arp-interval": {
          "type": "integer",
          "format": "int32"
        },
        "arp-ip-targets": {
          "type": "array",
          "maxItems": 16,
          "items": {
            "type": "string",
            "format": "ipv4"
          }
        },
        "arp-validate": {
          "type": "string",
          "enum": [
            "none",
            "active",
            "backup",
            "all"
          ]
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "down-delay": {
          "type": "integer",
          "format": "int32"
        },
        "fail-over-mac-policy": {
          "type": "string",
          "enum": [
            "none",
            "active",
            "follow"
          ]
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "gratuitous-arp": {
          "type": "integer",
          "format": "int32"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lacp-rate": {
          "type": "string",
          "enum": [
            "slow",
            "fast"
          ]
        },
        "learn-packet-interval": {
          "type": "integer",
          "format": "int32"
        },
        "mii-monitor-interval": {
          "type": "integer",
          "format": "int32"
        },
        "min-links": {
          "type": "integer",
          "format": "int32"
        },
        "mode": {
          "type": "string",
          "enum": [
            "balance-rr",
            "active-backup",
            "balance-xor",
            "broadcast",
            "802.3ad",
            "balance-tlb",
            "balance-alb"
          ]
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "packets-per-slave": {
          "type": "integer",
          "format": "int32"
        },
        "primary-reselect-policy": {
          "type": "string",
          "enum": [
            "always",
            "better",
            "failure"
          ]
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        },
        "transmit-hash-policy": {
          "type": "string",
          "enum": [
            "layer2",
            "layer2+3",
            "layer3+4",
            "encap2+3",
            "encap3+4"
          ]
        },
        "up-delay": {
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "bond"
      }
    },
    "MetaDataNetworkBridgesConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ageing-time": {
          "type": "integer",
          "format": "int32"
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "forward-delay": {
          "type": "integer",
          "format": "int32"
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "hello-time": {
          "type": "integer",
          "format": "int32"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "max-age": {
          "type": "integer",
          "format": "int32"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "path-cost": {
          "type": "integer",
          "format": "int32"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        },
        "stp": {
          "type": "boolean",
          "default": true
        }
      },
      "xml": {
        "name": "bridge"
      }
    },
    "MetaDataNetworkConfig": {
      "type": "object",
      "properties": {
        "bonds": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetaDataNetworkBondsConfig"
          }
        },
        "bridges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetaDataNetworkBridgesConfig"
          }
        },
        "interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
          }
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          },
          "xml": {
            "name": "route",
            "wrapped": true
          }
        },
        "vlans": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetaDataNetworkVlansConfig"
          }
        }
      },
      "xml": {
        "name": "network"
      }
    },
    "MetaDataNetworkEthernetsConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        }
      },
      "xml": {
        "name": "ethernet"
      }
    },
    "MetaDataNetworkEthernetsDNSConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "search": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "hostname"
          }
        }
      }
    },
    "MetaDataNetworkEthernetsMatchConfig": {
      "type": "object",
      "properties": {
        "driver": {
          "type": "string"
        },
        "macaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MetaDataNetworkInterfaceConfig": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsConfig"
        },
        "id": {
          "type": "string"
        },
        "macAddress": {
          "type": "string"
        },
        "networkID": {
          "type": "string"
        }
      }
    },
    "MetaDataNetworkRoutesConfig": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "integer",
          "format": "int32"
        },
        "to": {
          "type": "string"
        },
        "via": {
          "type": "string"
        }
      },
      "xml": {
        "name": "route"
      }
    },
    "MetaDataNetworkVlansConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "link": {
          "type": "string"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        }
      },
      "xml": {
        "name": "vlan"
      }
    },
    "Network": {
      "type": "object"
    },
    "NetworkIP4Config": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "format": "ipv4"
        },
        "dhcp": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "gateway": {
          "type": "string",
          "format": "ipv4"
        },
        "vlan": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NetworkInterface": {
      "type": "object"
    },
    "NetworkMasterInterface": {
      "type": "object",
      "properties": {
        "device": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "NewImage": {
      "type": "object",
      "required": [
        "operation"
      ],
      "properties": {
        "buildContext": {
          "type": "string",
          "format": "byte"
        },
        "buildContextImageType": {
          "type": "string",
          "enum": [
            "standard",
            "osv",
            "qemu"
          ]
        },
        "buildContextType": {
          "type": "string",
          "enum": [
            "promethium",
            "docker",
            "tar",
            "raw",
            "qcow2",
            "capstan"
          ]
        },
        "cloneFrom": {
          "type": "string"
        },
        "operation": {
          "type": "string",
          "enum": [
            "clone",
            "build"
          ]
        }
      },
      "xml": {
        "name": "NewImage"
      }
    },
    "NewNetwork": {
      "type": "object",
      "required": [
        "type",
        "physicalInterface"
      ],
      "properties": {
        "physicalInterface": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "linux",
            "ovs"
          ]
        }
      }
    },
    "NewStorage": {
      "type": "object"
    },
    "NewVM": {
      "type": "object",
      "properties": {
        "autoStart": {
          "type": "boolean"
        },
        "cpus": {
          "type": "integer",
          "format": "int64"
        },
        "fromImage": {
          "type": "string"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "primaryNetworkID": {
          "type": "string"
        },
        "rootDiskSize": {
          "type": "integer",
          "format": "int64"
        },
        "storageName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewVM"
      }
    },
    "NewVMDisk": {
      "type": "object",
      "properties": {
        "backendStorageID": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "NewVMDisk"
      }
    },
    "NewVMInterface": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsConfig"
        },
        "macAddress": {
          "type": "string"
        },
        "networkID": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewVMInterface"
      }
    },
    "NewVMVolume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMVolume"
      }
    },
    "PhysicalInterface": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "macAddress": {
          "type": "string"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Storage": {
      "type": "object"
    },
    "StorageDisk": {
      "type": "object"
    },
    "StorageImage": {
      "type": "object"
    },
    "StorageKernel": {
      "type": "object"
    },
    "UpdateNetwork": {
      "type": "object"
    },
    "UpdateStorage": {
      "type": "object"
    },
    "UpdateVM": {
      "type": "object",
      "properties": {
        "autoStart": {
          "type": "boolean"
        },
        "bootCmd": {
          "type": "string"
        },
        "cpus": {
          "type": "integer",
          "format": "int64"
        },
        "entryPoint": {
          "type": "string"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UpdateVM"
      }
    },
    "UpdateVMDisk": {
      "type": "object",
      "properties": {
        "isRoot": {
          "type": "boolean"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "storageURI": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UpdateVMDisk"
      }
    },
    "UpdateVMInterface": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsConfig"
        },
        "macAddress": {
          "type": "string"
        },
        "networkID": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UpdateVMInterface"
      }
    },
    "UpdateVMVolume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMVolume"
      }
    },
    "VM": {
      "type": "object",
      "properties": {
        "autoStart": {
          "type": "boolean"
        },
        "bootCmd": {
          "type": "string"
        },
        "clusterID": {
          "type": "string",
          "format": "uuid4"
        },
        "clustered": {
          "type": "boolean"
        },
        "cpus": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMDisk"
          },
          "xml": {
            "name": "disk",
            "wrapped": true
          }
        },
        "entryPoint": {
          "type": "string"
        },
        "hostNode": {
          "type": "string"
        },
        "hostNodeID": {
          "type": "string",
          "format": "uuid4"
        },
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "$ref": "#/definitions/MetaDataNetworkConfig"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "VM status",
          "type": "string",
          "enum": [
            "starting",
            "started",
            "restarting",
            "stopping",
            "stopped"
          ]
        },
        "stoppedAt": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "firecracker-standard",
            "firecracker-osv",
            "qemu-standard"
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMVolume"
          },
          "xml": {
            "name": "volume",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "VM"
      }
    },
    "VMDisk": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "isRoot": {
          "type": "boolean"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "storageURI": {
          "type": "string"
        }
      },
      "xml": {
        "name": "VMDisk"
      }
    },
    "VMInterface": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": ""
        },
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "networkID": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMInterface"
      }
    },
    "VMListItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "name": {
          "type": "string"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "VM status",
          "type": "string",
          "enum": [
            "starting",
            "started",
            "restarting",
            "stopping",
            "stopped"
          ]
        },
        "stoppedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "VMListItem"
      }
    },
    "VMVolume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMVolume"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "item": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "completed": {
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "minLength": 1
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for Promethium Daemon",
    "title": "Promethium Daemon API",
    "version": "1.0.0"
  },
  "paths": {
    "/images": {
      "get": {
        "description": "Returns a list of Images",
        "produces": [
          "application/json"
        ],
        "tags": [
          "images"
        ],
        "summary": "Get a list of Images",
        "operationId": "getImagesList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Images",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create a new Image",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create a new Image",
        "operationId": "createImage",
        "parameters": [
          {
            "description": "Create new Image",
            "name": "imageConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/networking": {
      "get": {
        "description": "Get all networks",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getNetworkList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create new network",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "createNetwork",
        "parameters": [
          {
            "description": "Create new Network (bridge)",
            "name": "netConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          }
        }
      }
    },
    "/networking/physicalInterfaces": {
      "get": {
        "description": "Get all physical interfaces",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getPhysicalInterfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInterface"
              }
            }
          }
        }
      }
    },
    "/networking/{networkID}": {
      "get": {
        "description": "Get a network (bridge)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "networkID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          }
        }
      },
      "put": {
        "description": "Update network",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "updateNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "networkID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "netConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      },
      "delete": {
        "description": "Get a network (bridge)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "destroyNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "ID of Network to delete",
            "name": "networkID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          }
        }
      }
    },
    "/networking/{networkID}/interfaces": {
      "get": {
        "description": "Get a network (bridge) interfaces",
        "produces": [
          "application/json"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getNetworkInterfaces",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "networkID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkInterface"
              }
            }
          }
        }
      }
    },
    "/storage": {
      "get": {
        "description": "Get all storage",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "getStorageList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Storage"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create new storage",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "createStorage",
        "parameters": [
          {
            "description": "Create new VM instance",
            "name": "storageConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          }
        }
      }
    },
    "/storage/{storageID}": {
      "get": {
        "description": "Get storage item",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "getStorage",
        "parameters": [
          {
            "type": "string",
            "description": "ID of Storage to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      },
      "put": {
        "description": "Update storage item",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "updateStorage",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "storageConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      },
      "delete": {
        "description": "Remove storage item",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storage"
        ],
        "operationId": "destroyStorage",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Storage not found"
          }
        }
      }
    },
    "/storage/{storageID}/disks": {
      "get": {
        "description": "Get storage item",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageDisk"
              }
            }
          }
        }
      }
    },
    "/storage/{storageID}/images": {
      "get": {
        "description": "Get storage item",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageImage"
              }
            }
          }
        }
      }
    },
    "/storage/{storageID}/kernels": {
      "get": {
        "description": "Get storage item",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "storageID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageKernel"
              }
            }
          }
        }
      }
    },
    "/vms": {
      "get": {
        "description": "Returns a list of VMs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VMs",
        "operationId": "getVMList",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of VMs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VMListItem"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create an instance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create a VM instance",
        "operationId": "createVM",
        "parameters": [
          {
            "description": "Create new VM instance",
            "name": "vmConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}": {
      "get": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "getVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      },
      "put": {
        "description": "Update an instance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM instance",
        "operationId": "updateVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "Pet to add to the store",
            "name": "vmConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      },
      "delete": {
        "description": "Destroy an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Destroy a VM instance",
        "operationId": "deleteVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}/disks": {
      "get": {
        "description": "Returns a list of VM Attached Disks",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VM Attached Disks",
        "operationId": "getVMDiskList",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Disks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VMDisk"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create or attach a VM Disk",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create or attach a VM Disk",
        "operationId": "createVMDisk",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "vmDiskConfid",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVMDisk"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMDisk"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/disks/{diskID}": {
      "get": {
        "description": "Returns an isntance of VM Disk",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM Disk",
        "operationId": "getVMDisk",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Disk to use",
            "name": "diskID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMDisk"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM or Disk not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Update an instance of VM interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM Interface instance",
        "operationId": "updateVMDisk",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Disk to use",
            "name": "diskID",
            "in": "path",
            "required": true
          },
          {
            "description": "Pet to add to the store",
            "name": "vmDiskConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVMDisk"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateVMDisk"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM Interface not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "deleteVMDrive",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "diskID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/interfaces": {
      "get": {
        "description": "Returns a list of VM Network Itnerfaces",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VM Network Interfaces",
        "operationId": "getVMInterfaceList",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of VM Network Interfaces",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create a new VM Network Itnerface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create a new VM Network Itnerface",
        "operationId": "createVMInterface",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "Create new VM instance",
            "name": "interfaceConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVMInterface"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/interfaces/{interfaceID}": {
      "get": {
        "description": "Returns an instance of VM Network Interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM Network Interface",
        "operationId": "getVMInterace",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "interfaceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Update an instance of VM Network Interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM Network Interface instance",
        "operationId": "updateVMInterface",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "interfaceID",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated VM Interface Config",
            "name": "vmInterfaceConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVMInterface"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM Interface not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Destroy a VM Network Interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Destroy a VM Network Interface",
        "operationId": "deleteVMInterface",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "interfaceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/start": {
      "get": {
        "description": "Starts an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Start a VM instance",
        "operationId": "startVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}/stop": {
      "get": {
        "description": "Stops an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Stop a VM instance",
        "operationId": "stopVM",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          }
        }
      }
    },
    "/vms/{vmID}/volumes": {
      "get": {
        "description": "Returns a list of VM Volumes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Get a list of VM Volumes",
        "operationId": "getVMVolumeList",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of VM Volumes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VMVolume"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Create or attach a VM Volume",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Create or attach a VM Volume",
        "operationId": "createVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to use",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "description": "VM Volume Config",
            "name": "volumeConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVMVolume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMVolume"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/vms/{vmID}/volumes/{volumeID}": {
      "get": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "getVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Volume to use",
            "name": "volumeID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMVolume"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Update an instance of VM interface",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Update a VM Interface instance",
        "operationId": "updateVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Volume to use",
            "name": "volumeID",
            "in": "path",
            "required": true
          },
          {
            "description": "Pet to add to the store",
            "name": "vmInterfaceConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVMVolume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VMVolume"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM Interface not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Returns an isntance of VM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "vms"
        ],
        "summary": "Return a VM instance",
        "operationId": "deleteVMVolume",
        "parameters": [
          {
            "type": "string",
            "description": "ID of VM to return",
            "name": "vmID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of VM Interface to use",
            "name": "volumeID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "VM not found"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Image": {
      "type": "object",
      "properties": {
        "Architecture": {
          "type": "string",
          "enum": [
            "x86_64",
            "aarch64"
          ]
        },
        "BootParams": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "type": "string"
        },
        "ImageHash": {
          "type": "string"
        },
        "KernelHash": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        },
        "Source": {
          "type": "string",
          "enum": [
            "promethium",
            "docker",
            "tar",
            "raw",
            "qcow2",
            "capstan"
          ]
        },
        "SourceURI": {
          "type": "string"
        },
        "Type": {
          "type": "string",
          "enum": [
            "standard",
            "osv",
            "qemu"
          ]
        },
        "Version": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Image"
      }
    },
    "MetaDataNetworkBondsConfig": {
      "type": "object",
      "properties": {
        "ad-select": {
          "type": "string",
          "enum": [
            "stable",
            "bandwidth",
            "count"
          ]
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "all-slaves-active": {
          "type": "boolean"
        },
        "arp-all-targets": {
          "type": "string",
          "enum": [
            "any",
            "all"
          ]
        },
        "arp-interval": {
          "type": "integer",
          "format": "int32"
        },
        "arp-ip-targets": {
          "type": "array",
          "maxItems": 16,
          "items": {
            "type": "string",
            "format": "ipv4"
          }
        },
        "arp-validate": {
          "type": "string",
          "enum": [
            "none",
            "active",
            "backup",
            "all"
          ]
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "down-delay": {
          "type": "integer",
          "format": "int32"
        },
        "fail-over-mac-policy": {
          "type": "string",
          "enum": [
            "none",
            "active",
            "follow"
          ]
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "gratuitous-arp": {
          "type": "integer",
          "format": "int32"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lacp-rate": {
          "type": "string",
          "enum": [
            "slow",
            "fast"
          ]
        },
        "learn-packet-interval": {
          "type": "integer",
          "format": "int32"
        },
        "mii-monitor-interval": {
          "type": "integer",
          "format": "int32"
        },
        "min-links": {
          "type": "integer",
          "format": "int32"
        },
        "mode": {
          "type": "string",
          "enum": [
            "balance-rr",
            "active-backup",
            "balance-xor",
            "broadcast",
            "802.3ad",
            "balance-tlb",
            "balance-alb"
          ]
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "packets-per-slave": {
          "type": "integer",
          "format": "int32"
        },
        "primary-reselect-policy": {
          "type": "string",
          "enum": [
            "always",
            "better",
            "failure"
          ]
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        },
        "transmit-hash-policy": {
          "type": "string",
          "enum": [
            "layer2",
            "layer2+3",
            "layer3+4",
            "encap2+3",
            "encap3+4"
          ]
        },
        "up-delay": {
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "bond"
      }
    },
    "MetaDataNetworkBridgesConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ageing-time": {
          "type": "integer",
          "format": "int32"
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "forward-delay": {
          "type": "integer",
          "format": "int32"
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "hello-time": {
          "type": "integer",
          "format": "int32"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "max-age": {
          "type": "integer",
          "format": "int32"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "path-cost": {
          "type": "integer",
          "format": "int32"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        },
        "stp": {
          "type": "boolean",
          "default": true
        }
      },
      "xml": {
        "name": "bridge"
      }
    },
    "MetaDataNetworkConfig": {
      "type": "object",
      "properties": {
        "bonds": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetaDataNetworkBondsConfig"
          }
        },
        "bridges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetaDataNetworkBridgesConfig"
          }
        },
        "interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkInterfaceConfig"
          }
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          },
          "xml": {
            "name": "route",
            "wrapped": true
          }
        },
        "vlans": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetaDataNetworkVlansConfig"
          }
        }
      },
      "xml": {
        "name": "network"
      }
    },
    "MetaDataNetworkEthernetsConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        }
      },
      "xml": {
        "name": "ethernet"
      }
    },
    "MetaDataNetworkEthernetsDNSConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "search": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "hostname"
          }
        }
      }
    },
    "MetaDataNetworkEthernetsMatchConfig": {
      "type": "object",
      "properties": {
        "driver": {
          "type": "string"
        },
        "macaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MetaDataNetworkInterfaceConfig": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsConfig"
        },
        "id": {
          "type": "string"
        },
        "macAddress": {
          "type": "string"
        },
        "networkID": {
          "type": "string"
        }
      }
    },
    "MetaDataNetworkRoutesConfig": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "integer",
          "format": "int32"
        },
        "to": {
          "type": "string"
        },
        "via": {
          "type": "string"
        }
      },
      "xml": {
        "name": "route"
      }
    },
    "MetaDataNetworkVlansConfig": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dhcp4": {
          "type": "boolean"
        },
        "dhcp6": {
          "type": "boolean"
        },
        "gateway4": {
          "type": "string",
          "format": "ipv4"
        },
        "gateway6": {
          "type": "string",
          "format": "ipv6"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "link": {
          "type": "string"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "nameservers": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsDNSConfig"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataNetworkRoutesConfig"
          }
        }
      },
      "xml": {
        "name": "vlan"
      }
    },
    "Network": {
      "type": "object"
    },
    "NetworkIP4Config": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "format": "ipv4"
        },
        "dhcp": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "gateway": {
          "type": "string",
          "format": "ipv4"
        },
        "vlan": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NetworkInterface": {
      "type": "object"
    },
    "NetworkMasterInterface": {
      "type": "object",
      "properties": {
        "device": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "NewImage": {
      "type": "object",
      "required": [
        "operation"
      ],
      "properties": {
        "buildContext": {
          "type": "string",
          "format": "byte"
        },
        "buildContextImageType": {
          "type": "string",
          "enum": [
            "standard",
            "osv",
            "qemu"
          ]
        },
        "buildContextType": {
          "type": "string",
          "enum": [
            "promethium",
            "docker",
            "tar",
            "raw",
            "qcow2",
            "capstan"
          ]
        },
        "cloneFrom": {
          "type": "string"
        },
        "operation": {
          "type": "string",
          "enum": [
            "clone",
            "build"
          ]
        }
      },
      "xml": {
        "name": "NewImage"
      }
    },
    "NewNetwork": {
      "type": "object",
      "required": [
        "type",
        "physicalInterface"
      ],
      "properties": {
        "physicalInterface": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "linux",
            "ovs"
          ]
        }
      }
    },
    "NewStorage": {
      "type": "object"
    },
    "NewVM": {
      "type": "object",
      "properties": {
        "autoStart": {
          "type": "boolean"
        },
        "cpus": {
          "type": "integer",
          "format": "int64"
        },
        "fromImage": {
          "type": "string"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "primaryNetworkID": {
          "type": "string"
        },
        "rootDiskSize": {
          "type": "integer",
          "format": "int64"
        },
        "storageName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewVM"
      }
    },
    "NewVMDisk": {
      "type": "object",
      "properties": {
        "backendStorageID": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "NewVMDisk"
      }
    },
    "NewVMInterface": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsConfig"
        },
        "macAddress": {
          "type": "string"
        },
        "networkID": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewVMInterface"
      }
    },
    "NewVMVolume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMVolume"
      }
    },
    "PhysicalInterface": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "macAddress": {
          "type": "string"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Storage": {
      "type": "object"
    },
    "StorageDisk": {
      "type": "object"
    },
    "StorageImage": {
      "type": "object"
    },
    "StorageKernel": {
      "type": "object"
    },
    "UpdateNetwork": {
      "type": "object"
    },
    "UpdateStorage": {
      "type": "object"
    },
    "UpdateVM": {
      "type": "object",
      "properties": {
        "autoStart": {
          "type": "boolean"
        },
        "bootCmd": {
          "type": "string"
        },
        "cpus": {
          "type": "integer",
          "format": "int64"
        },
        "entryPoint": {
          "type": "string"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UpdateVM"
      }
    },
    "UpdateVMDisk": {
      "type": "object",
      "properties": {
        "isRoot": {
          "type": "boolean"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "storageURI": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UpdateVMDisk"
      }
    },
    "UpdateVMInterface": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MetaDataNetworkEthernetsConfig"
        },
        "macAddress": {
          "type": "string"
        },
        "networkID": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UpdateVMInterface"
      }
    },
    "UpdateVMVolume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMVolume"
      }
    },
    "VM": {
      "type": "object",
      "properties": {
        "autoStart": {
          "type": "boolean"
        },
        "bootCmd": {
          "type": "string"
        },
        "clusterID": {
          "type": "string",
          "format": "uuid4"
        },
        "clustered": {
          "type": "boolean"
        },
        "cpus": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMDisk"
          },
          "xml": {
            "name": "disk",
            "wrapped": true
          }
        },
        "entryPoint": {
          "type": "string"
        },
        "hostNode": {
          "type": "string"
        },
        "hostNodeID": {
          "type": "string",
          "format": "uuid4"
        },
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "$ref": "#/definitions/MetaDataNetworkConfig"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "VM status",
          "type": "string",
          "enum": [
            "starting",
            "started",
            "restarting",
            "stopping",
            "stopped"
          ]
        },
        "stoppedAt": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "firecracker-standard",
            "firecracker-osv",
            "qemu-standard"
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMVolume"
          },
          "xml": {
            "name": "volume",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "VM"
      }
    },
    "VMDisk": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "isRoot": {
          "type": "boolean"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "storageURI": {
          "type": "string"
        }
      },
      "xml": {
        "name": "VMDisk"
      }
    },
    "VMInterface": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": ""
        },
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "networkID": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMInterface"
      }
    },
    "VMListItem": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid4"
        },
        "name": {
          "type": "string"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "VM status",
          "type": "string",
          "enum": [
            "starting",
            "started",
            "restarting",
            "stopping",
            "stopped"
          ]
        },
        "stoppedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "VMListItem"
      }
    },
    "VMVolume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid4"
        }
      },
      "xml": {
        "name": "VMVolume"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "item": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "completed": {
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "minLength": 1
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    }
  }
}`))
}
